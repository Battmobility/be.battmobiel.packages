{"version":3,"file":"sofico-framework-app-config.js","sources":["../../../../projects/sofico-framework/app-config/src/lib/app-config.token.ts","../../../../projects/sofico-framework/app-config/src/lib/services/config.service.ts","../../../../projects/sofico-framework/app-config/src/lib/pipes/currency-config.pipe.ts","../../../../projects/sofico-framework/app-config/src/lib/pipes/date-config.pipe.ts","../../../../projects/sofico-framework/app-config/src/lib/pipes/time-config.pipe.ts","../../../../projects/sofico-framework/app-config/src/lib/pipes/date-time-config.pipe.ts","../../../../projects/sofico-framework/app-config/src/lib/app-config.module.ts","../../../../projects/sofico-framework/app-config/src/lib/app-config-utils.module.ts","../../../../projects/sofico-framework/app-config/src/public-api.ts","../../../../projects/sofico-framework/app-config/src/sofico-framework-app-config.ts"],"names":[],"mappings":";;;;;;;MAGa,gBAAgB,GAAG,IAAI,cAAc,CAChD,kBAAkB;AAClB;AACF,MCEa,aAAa;AAC1B,IAQE,YACoC,SAAoB,EAC9C,gBAAkC,EAClC,aAA4B;AACrC;AACkB,QAJiB,cAAS,GAAT,SAAS,CAAW;AAAC,QAC/C,qBAAgB,GAAhB,gBAAgB,CAAkB;AAAC,QACnC,kBAAa,GAAb,aAAa,CAAe;AACxC;AACM;AACe;AAAY,QATvB,uBAAkB,GAAuB,IAAI,CAAC,gBAAgB;AACxE,aAAK,YAAY,CAAC,MAAM,CAAC;AACzB;AAE2B,QAKvB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;AAClC,YAAM,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAC1D,SAAK;AACL,QACI,IACE,EACE,OAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,0CAAE,QAAQ,YACtC,IAAI,CAAC,kBAAkB,CAAC,IAAI,0CAAE,QAAQ,CAAA,CACvC,EACD;AACN,YAAM,MAAM,KAAK,CAAC,6CAA6C,CAAC,CAAC;AACjE,SAAK;AACL,QACI,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,QAAQ,CAAC;AACjE,QAAI,MAAM,aAAa,GAAW;AAClC,YAAM,GAAG,EAAE;AACX,gBAAQ,OAAO,EAAE,GAAG,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,IAAI,MAAM;AAC7D,aAAO;AACP,YAAM,IAAI,EAAE;AACZ,gBAAQ,QAAQ,EAAE,EAAE;AACpB,gBAAQ,WAAW,EAAE,CAAC,GAAG,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,IAAI,EAAE,CAAC;AAC/D,gBAAQ,OAAO,EAAE,GAAG,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,IAAI,eAAe;AACtE,gBAAQ,KAAK,EAAE,UAAU;AACzB,gBAAQ,KAAK,EAAE,QAAQ;AACvB,gBAAQ,kBAAkB,EAAE,EAAE;AAC9B,aAAO;AACP,YAAM,KAAK,EAAE,KAAK;AAClB,YAAM,GAAG,EAAE,SAAS;AACpB,SAAK,CAAC;AACN,QACI,IAAI,UAAkB,CAAC;AAC3B,QAAI,UAAI,IAAI,CAAC,kBAAkB,0CAAE,IAAI,EAAE;AACvC,YAAM,UAAU,GAAG;AACnB,gBAAQ,GAAG,EAAE;AACb,oBAAU,OAAO,EAAE,WAAW,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,MAAM;AACvE,iBAAS;AACT,gBAAQ,IAAI,EAAE;AACd,oBAAU,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ;AACzD,oBAAU,WAAW,EAAE,CAAC,WAAW,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,MAAM,CAAC;AAC7E,oBAAU,OAAO,EAAE,WAAW,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,eAAe;AAChF,oBAAU,KAAK,EAAE,UAAU;AAC3B,oBAAU,KAAK,EAAE,QAAQ;AACzB,oBAAU,kBAAkB,EAAE,EAAE;AAChC,iBAAS;AACT,gBAAQ,GAAG,EAAE,SAAS;AACtB,aAAO,CAAC;AACR,SAAK;AACL,QACI,IAAI,MAAM,GAAW,IAAI,CAAC,aAAa,CAAC,SAAS,CAC/C,aAAa,EACb,UAAU,EACV,IAAI,CAAC,kBAAkB,CACxB,CAAC;AACN;AAEG,QAAC,MAAM,mCACD,MAAM,KACT,GAAG,kCACE,MAAM,CAAC,GAAG,KACb,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,KAE/C,IAAI,kCACC,MAAM,CAAC,IAAI,KACd,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAEjD,CAAC;AACN,QAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACzB,KAAG;AACH,IACU,WAAW,CAAC,GAAW;AAAI,QACjC,IAAI,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,CAAC,CAAC,CAAC,OAAM,GAAG,EAAE;AACjC,YAAM,OAAO,GAAG,GAAG,GAAG,CAAC;AACvB,SAAK;AACL,QAAI,OAAO,GAAG,CAAC;AACf,KAAG;AACH;yCA3FC,UAAU;uGACT;AAAC;AACU,4CASR,MAAM,SAAC,gBAAgB;AAAS,YAjBb,gBAAgB;AAAI,YAAnC,aAAa;AAAG;;;;;;qGAAE;AAAC;AAAC,MCIhB,kBAAkB;AAAG,IAChC,YACU,YAA0B,EAC1B,aAA4B;AACrC,QAFS,iBAAY,GAAZ,YAAY,CAAc;AAAC,QAC3B,kBAAa,GAAb,aAAa,CAAe;AACxC,KAAM;AACN,IACE,SAAS,CAAC,KAAU;AAAI,QACtB,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAChC,KAAK,EACL,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAC3C,CAAC;AACN,KAAG;AACH;8CAbC,IAAI,SAAC,EAAE,IAAI,EAAE,mBAAmB,EAAE;oHAC9B;AAAC;AAA4C,YALzC,YAAY;AAAI,YAEhB,aAAa;AAAG;;;;sGAAE;AAAC;AAAC,MCGhB,cAAc;AAAG,IAC5B,YACU,QAAkB,EAClB,aAA4B;AACrC,QAFS,aAAQ,GAAR,QAAQ,CAAU;AAAC,QACnB,kBAAa,GAAb,aAAa,CAAe;AACxC,KAAM;AACN,IACE,SAAS,CAAC,KAAU;AAAI,QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAC5B,KAAK,EACL,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CACzC,CAAC;AACN,KAAG;AACH;0CAbC,IAAI,SAAC,EAAE,IAAI,EAAE,eAAe,EAAE;wGAC1B;AAAC;AAAwC,YALrC,QAAQ;AAAI,YAEZ,aAAa;AAAG;;;;kGAAE;AAAC;AAAC,MCGhB,cAAc;AAAG,IAC5B,YACU,aAA4B,EAC5B,QAAkB;AAC3B,QAFS,kBAAa,GAAb,aAAa,CAAe;AAAC,QAC7B,aAAQ,GAAR,QAAQ,CAAU;AAC9B,KAAM;AACN,IACE,SAAS,CAAC,KAAa;AAAI,QACzB,MAAM,cAAc,GAAG,cAAc,KAAK,EAAE,CAAC;AACjD,QAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAC5B,cAAc,EACd,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CACzC,CAAC;AACN,KAAG;AACH;0CAdC,IAAI,SAAC,EAAE,IAAI,EAAE,eAAe,EAAE;wGAC1B;AAAC;AAAwC,YAHrC,aAAa;AAAI,YAFjB,QAAQ;AAAG;;;;kGAAE;AAAC;AAAC,MCKX,kBAAkB;AAAG,IAChC,YACU,aAA4B,EAC5B,QAAkB;AAC3B,QAFS,kBAAa,GAAb,aAAa,CAAe;AAAC,QAC7B,aAAQ,GAAR,QAAQ,CAAU;AAC9B,KAAM;AACN,IACE,SAAS,CAAC,KAAU;AAAI,QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAC5B,KAAK,EACL,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU;AAC9C,YAAQ,GAAG;AACX,YAAQ,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAC3C,CAAC;AACN,KAAG;AACH;8CAfC,IAAI,SAAC,EAAE,IAAI,EAAE,mBAAmB,EAAE;oHAC9B;AAAC;AAA4C,YAHzC,aAAa;AAAI,YAFjB,QAAQ;AAAG;;;;kGAAE;AAAC;AAAC,MCkBX,eAAe;AAC5B,IAAE,YAC0B,YAA6B,EACP,SAAoB,EACtD,gBAAkC;AAC/C,QAF+C,cAAS,GAAT,SAAS,CAAW;AAAC,QAGnE,IAAI,YAAY,EAAE;AACtB,YAAM,MAAM,IAAI,KAAK,CACb,wEAAwE,CACzE,CAAC;AACR,SAAK;AACL,QAAI,IAAI,CAAC,SAAS,EAAE;AACpB,YAAM,MAAM,KAAK,CACT,GAAG,eAAe,CAAC,IAAI,kDAAkD,CAC1E,CAAC;AACR,SAAK;AACL,QAAI,IAAI,CAAC,gBAAgB,EAAE;AAC3B,YAAM,MAAM,IAAI,KAAK,CACb,8DAA8D,CAC/D,CAAC;AACR,SAAK;AACL,KAAG;AACH,IACE,OAAO,OAAO,CAAC,MAAiB;AAAI,QAClC,OAAO;AACX,YAAM,QAAQ,EAAE,eAAe;AAC/B,YAAM,SAAS,EAAE;AACjB,gBAAQ;AACR,oBAAU,OAAO,EAAE,gBAAgB;AACnC,oBAAU,QAAQ,EAAE,MAAM;AAC1B,iBAAS;AACT,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AACH;2CAtCC,QAAQ,SAAC,kBACR,OAAO,EAAE,CAAC,YAAY,CAAC,kBACvB,SAAS,EAAE,CAAC,aAAa,CAAC,cAC3B;;0GACI;AAAC;AAEL,YAAyC,eAAe,uBAApD,QAAQ,YAAI,QAAQ;AAAO,4CAC3B,QAAQ,YAAI,MAAM,SAAC,gBAAgB;AAAS,YAZxC,gBAAgB,uBAapB,QAAQ;AAAM;;;;;;;;;;;;;;;;;;;kCAAE;AAAC;AAAC,MCAV,oBAAoB;AAAG;gDAfnC,QAAQ,SAAC,kBACR,OAAO,EAAE,CAAC,YAAY,CAAC;QACvB,YAAY,EAAE,sBACZ,kBAAkB,sBAClB;aAAc,sBACd,cAAc,sBACd;KAAkB,kBACnB,kBACD,OAAO,EAAE,sBACP,kBAAkB,sBAClB,cAAc,sBACd,cAAc,sBACd,kBAAkB,kBACnB,cACF;;;;;;;;;;;;;;;;;;0BACI;AAAC;ACtBN;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AAC6H","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { AppConfig } from './types/app-config.type';\n\nexport const APP_CONFIG_TOKEN = new InjectionToken<AppConfig>(\n  'app-config-token'\n);\n","import { Inject, Injectable } from '@angular/core';\nimport { ObjectService, WindowRefService } from '@sofico-framework/utils';\nimport { APP_CONFIG_TOKEN } from '../app-config.token';\nimport { AppConfig } from '../types/app-config.type';\nimport { Config } from '../types/config.type';\nimport { ProvisioningConfig } from '../types/provisioning-config.type';\n\n@Injectable()\nexport class ConfigService {\n  public config: Config;\n\n  /**\n   * The config that is set on the nativeWindow\n   */\n  private provisioningConfig: ProvisioningConfig = this.windowRefService\n    .nativeWindow.config;\n\n  constructor(\n    @Inject(APP_CONFIG_TOKEN) private appConfig: AppConfig,\n    private windowRefService: WindowRefService,\n    private objectService: ObjectService\n  ) {\n    // provisioning config requirement\n    if (!this.provisioningConfig) {\n      throw Error('No provisioning configuration found!');\n    }\n\n    if (\n      !(\n        this.provisioningConfig.auth?.clientId ||\n        this.provisioningConfig.base?.clientId\n      )\n    ) {\n      throw Error('auth.clientId is required in configuration!');\n    }\n\n    const location = this.windowRefService.nativeWindow.location;\n    const defaultConfig: Config = {\n      api: {\n        baseUrl: `${location.protocol}//${location.host}/api`\n      },\n      auth: {\n        clientId: '',\n        allowedUrls: [`${location.protocol}//${location.host}`],\n        baseUrl: `${location.protocol}//${location.host}/auth/realms/`,\n        grant: 'implicit',\n        realm: 'master',\n        logoutRedirectUrls: []\n      },\n      debug: false,\n      app: appConfig\n    };\n\n    let baseConfig: Config;\n    if (this.provisioningConfig?.base) {\n      baseConfig = {\n        api: {\n          baseUrl: `https://${this.provisioningConfig.base.domain}/api`\n        },\n        auth: {\n          clientId: this.provisioningConfig.base.clientId,\n          allowedUrls: [`https://${this.provisioningConfig.base.domain}/api`],\n          baseUrl: `https://${this.provisioningConfig.base.domain}/auth/realms/`,\n          grant: 'implicit',\n          realm: 'master',\n          logoutRedirectUrls: []\n        },\n        app: appConfig\n      };\n    }\n\n    let config: Config = this.objectService.mergeDeep(\n      defaultConfig,\n      baseConfig,\n      this.provisioningConfig\n    );\n\n    // We ensure the API and AUTH baseUrl have a trailing slash\n    config = {\n      ...config,\n      api: {\n        ...config.api,\n        baseUrl: this.getValidUrl(config.api.baseUrl)\n      },\n      auth: {\n        ...config.auth,\n        baseUrl: this.getValidUrl(config.auth.baseUrl)\n      }\n    };\n    this.config = config;\n  }\n\n  private getValidUrl(url: string): string {\n    if (url?.substr(-1) !== '/') {\n      return `${url}/`;\n    }\n    return url;\n  }\n}\n","import { CurrencyPipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from '../services/config.service';\n\n@Pipe({ name: 'sofCurrencyConfig' })\nexport class CurrencyConfigPipe implements PipeTransform {\n  constructor(\n    private currencyPipe: CurrencyPipe,\n    private configService: ConfigService\n  ) {}\n\n  transform(value: any): string {\n    return this.currencyPipe.transform(\n      value,\n      this.configService.config.app.currencyCode\n    );\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from '../services/config.service';\n\n@Pipe({ name: 'sofDateConfig' })\nexport class DateConfigPipe implements PipeTransform {\n  constructor(\n    private datePipe: DatePipe,\n    private configService: ConfigService\n  ) {}\n\n  transform(value: any): string {\n    return this.datePipe.transform(\n      value,\n      this.configService.config.app.dateFormat\n    );\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from '../services/config.service';\n\n@Pipe({ name: 'sofTimeConfig' })\nexport class TimeConfigPipe implements PipeTransform {\n  constructor(\n    private configService: ConfigService,\n    private datePipe: DatePipe\n  ) {}\n\n  transform(value: string): string {\n    const dateTimeString = `1970-01-01 ${value}`;\n    return this.datePipe.transform(\n      dateTimeString,\n      this.configService.config.app.timeFormat\n    );\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from '../services/config.service';\n\n@Pipe({ name: 'sofDateTimeConfig' })\nexport class DateTimeConfigPipe implements PipeTransform {\n  constructor(\n    private configService: ConfigService,\n    private datePipe: DatePipe\n  ) {}\n\n  transform(value: any): string {\n    return this.datePipe.transform(\n      value,\n      this.configService.config.app.dateFormat +\n        ' ' +\n        this.configService.config.app.timeFormat\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Inject,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  SkipSelf\n} from '@angular/core';\n\nimport { WindowRefService } from '@sofico-framework/utils';\nimport { APP_CONFIG_TOKEN } from './app-config.token';\nimport { ConfigService } from './services/config.service';\nimport { AppConfig } from './types/app-config.type';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [ConfigService]\n})\nexport class AppConfigModule {\n  constructor(\n    @Optional() @SkipSelf() parentModule: AppConfigModule,\n    @Optional() @Inject(APP_CONFIG_TOKEN) private appConfig: AppConfig,\n    @Optional() windowRefService: WindowRefService\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'AppConfigModule is already loaded. Import in your base AppModule only.'\n      );\n    }\n    if (!appConfig) {\n      throw Error(\n        `${AppConfigModule.name} should be imported using forRoot static method!`\n      );\n    }\n    if (!windowRefService) {\n      throw new Error(\n        'You need to import the UtilServicesModule in your AppModule!'\n      );\n    }\n  }\n\n  static forRoot(config: AppConfig): ModuleWithProviders<AppConfigModule> {\n    return {\n      ngModule: AppConfigModule,\n      providers: [\n        {\n          provide: APP_CONFIG_TOKEN,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CurrencyConfigPipe } from './pipes/currency-config.pipe';\nimport { DateConfigPipe } from './pipes/date-config.pipe';\nimport { DateTimeConfigPipe } from './pipes/date-time-config.pipe';\nimport { TimeConfigPipe } from './pipes/time-config.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    CurrencyConfigPipe,\n    DateConfigPipe,\n    TimeConfigPipe,\n    DateTimeConfigPipe\n  ],\n  exports: [\n    CurrencyConfigPipe,\n    DateConfigPipe,\n    TimeConfigPipe,\n    DateTimeConfigPipe\n  ]\n})\nexport class AppConfigUtilsModule {}\n","/*\n * Public API Surface of app-config\n */\n\n// pipes\nexport * from './lib/pipes/currency-config.pipe';\nexport * from './lib/pipes/date-config.pipe';\nexport * from './lib/pipes/time-config.pipe';\nexport * from './lib/pipes/date-time-config.pipe';\n\n// services\nexport * from './lib/services/config.service';\n\n// types\nexport * from './lib/types/app-config.type';\nexport * from './lib/types/config.type';\nexport * from './lib/types/auth-config.type';\nexport * from './lib/types/base-config.type';\n\n// modules\nexport * from './lib/app-config.module';\nexport * from './lib/app-config-utils.module';\n\n// token\nexport * from './lib/app-config.token';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}