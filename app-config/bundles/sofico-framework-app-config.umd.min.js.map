{"version":3,"sources":["../../../../projects/sofico-framework/app-config/src/lib/app-config.token.ts","../../../../projects/sofico-framework/app-config/src/lib/services/config.service.ts","../../../../projects/sofico-framework/app-config/src/lib/pipes/currency-config.pipe.ts","../../../../projects/sofico-framework/app-config/src/lib/pipes/date-config.pipe.ts","../../../../projects/sofico-framework/app-config/src/lib/pipes/time-config.pipe.ts","../../../../projects/sofico-framework/app-config/src/lib/pipes/date-time-config.pipe.ts","../../../../projects/sofico-framework/app-config/src/lib/app-config.module.ts","../../../../projects/sofico-framework/app-config/src/lib/app-config-utils.module.ts"],"names":["APP_CONFIG_TOKEN","InjectionToken","ConfigService","appConfig","windowRefService","objectService","this","provisioningConfig","nativeWindow","config","Error","_a","auth","clientId","_b","base","baseConfig","location","defaultConfig","api","baseUrl","protocol","host","allowedUrls","grant","realm","logoutRedirectUrls","debug","app","_c","domain","mergeDeep","Object","assign","getValidUrl","prototype","url","substr","Injectable","Inject","args","WindowRefService","ObjectService","CurrencyConfigPipe","currencyPipe","configService","transform","value","currencyCode","Pipe","name","CurrencyPipe","DateConfigPipe","datePipe","dateFormat","DatePipe","TimeConfigPipe","dateTimeString","timeFormat","DateTimeConfigPipe","AppConfigModule","parentModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","decorators","type","Optional","SkipSelf","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { AppConfig } from './types/app-config.type';\n\nexport const APP_CONFIG_TOKEN = new InjectionToken<AppConfig>(\n  'app-config-token'\n);\n","import { Inject, Injectable } from '@angular/core';\nimport { ObjectService, WindowRefService } from '@sofico-framework/utils';\nimport { APP_CONFIG_TOKEN } from '../app-config.token';\nimport { AppConfig } from '../types/app-config.type';\nimport { Config } from '../types/config.type';\nimport { ProvisioningConfig } from '../types/provisioning-config.type';\n\n@Injectable()\nexport class ConfigService {\n  public config: Config;\n\n  /**\n   * The config that is set on the nativeWindow\n   */\n  private provisioningConfig: ProvisioningConfig = this.windowRefService\n    .nativeWindow.config;\n\n  constructor(\n    @Inject(APP_CONFIG_TOKEN) private appConfig: AppConfig,\n    private windowRefService: WindowRefService,\n    private objectService: ObjectService\n  ) {\n    // provisioning config requirement\n    if (!this.provisioningConfig) {\n      throw Error('No provisioning configuration found!');\n    }\n\n    if (\n      !(\n        this.provisioningConfig.auth?.clientId ||\n        this.provisioningConfig.base?.clientId\n      )\n    ) {\n      throw Error('auth.clientId is required in configuration!');\n    }\n\n    const location = this.windowRefService.nativeWindow.location;\n    const defaultConfig: Config = {\n      api: {\n        baseUrl: `${location.protocol}//${location.host}/api`\n      },\n      auth: {\n        clientId: '',\n        allowedUrls: [`${location.protocol}//${location.host}`],\n        baseUrl: `${location.protocol}//${location.host}/auth/realms/`,\n        grant: 'implicit',\n        realm: 'master',\n        logoutRedirectUrls: []\n      },\n      debug: false,\n      app: appConfig\n    };\n\n    let baseConfig: Config;\n    if (this.provisioningConfig?.base) {\n      baseConfig = {\n        api: {\n          baseUrl: `https://${this.provisioningConfig.base.domain}/api`\n        },\n        auth: {\n          clientId: this.provisioningConfig.base.clientId,\n          allowedUrls: [`https://${this.provisioningConfig.base.domain}/api`],\n          baseUrl: `https://${this.provisioningConfig.base.domain}/auth/realms/`,\n          grant: 'implicit',\n          realm: 'master',\n          logoutRedirectUrls: []\n        },\n        app: appConfig\n      };\n    }\n\n    let config: Config = this.objectService.mergeDeep(\n      defaultConfig,\n      baseConfig,\n      this.provisioningConfig\n    );\n\n    // We ensure the API and AUTH baseUrl have a trailing slash\n    config = {\n      ...config,\n      api: {\n        ...config.api,\n        baseUrl: this.getValidUrl(config.api.baseUrl)\n      },\n      auth: {\n        ...config.auth,\n        baseUrl: this.getValidUrl(config.auth.baseUrl)\n      }\n    };\n    this.config = config;\n  }\n\n  private getValidUrl(url: string): string {\n    if (url?.substr(-1) !== '/') {\n      return `${url}/`;\n    }\n    return url;\n  }\n}\n","import { CurrencyPipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from '../services/config.service';\n\n@Pipe({ name: 'sofCurrencyConfig' })\nexport class CurrencyConfigPipe implements PipeTransform {\n  constructor(\n    private currencyPipe: CurrencyPipe,\n    private configService: ConfigService\n  ) {}\n\n  transform(value: any): string {\n    return this.currencyPipe.transform(\n      value,\n      this.configService.config.app.currencyCode\n    );\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from '../services/config.service';\n\n@Pipe({ name: 'sofDateConfig' })\nexport class DateConfigPipe implements PipeTransform {\n  constructor(\n    private datePipe: DatePipe,\n    private configService: ConfigService\n  ) {}\n\n  transform(value: any): string {\n    return this.datePipe.transform(\n      value,\n      this.configService.config.app.dateFormat\n    );\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from '../services/config.service';\n\n@Pipe({ name: 'sofTimeConfig' })\nexport class TimeConfigPipe implements PipeTransform {\n  constructor(\n    private configService: ConfigService,\n    private datePipe: DatePipe\n  ) {}\n\n  transform(value: string): string {\n    const dateTimeString = `1970-01-01 ${value}`;\n    return this.datePipe.transform(\n      dateTimeString,\n      this.configService.config.app.timeFormat\n    );\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from '../services/config.service';\n\n@Pipe({ name: 'sofDateTimeConfig' })\nexport class DateTimeConfigPipe implements PipeTransform {\n  constructor(\n    private configService: ConfigService,\n    private datePipe: DatePipe\n  ) {}\n\n  transform(value: any): string {\n    return this.datePipe.transform(\n      value,\n      this.configService.config.app.dateFormat +\n        ' ' +\n        this.configService.config.app.timeFormat\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Inject,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  SkipSelf\n} from '@angular/core';\n\nimport { WindowRefService } from '@sofico-framework/utils';\nimport { APP_CONFIG_TOKEN } from './app-config.token';\nimport { ConfigService } from './services/config.service';\nimport { AppConfig } from './types/app-config.type';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [ConfigService]\n})\nexport class AppConfigModule {\n  constructor(\n    @Optional() @SkipSelf() parentModule: AppConfigModule,\n    @Optional() @Inject(APP_CONFIG_TOKEN) private appConfig: AppConfig,\n    @Optional() windowRefService: WindowRefService\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'AppConfigModule is already loaded. Import in your base AppModule only.'\n      );\n    }\n    if (!appConfig) {\n      throw Error(\n        `${AppConfigModule.name} should be imported using forRoot static method!`\n      );\n    }\n    if (!windowRefService) {\n      throw new Error(\n        'You need to import the UtilServicesModule in your AppModule!'\n      );\n    }\n  }\n\n  static forRoot(config: AppConfig): ModuleWithProviders<AppConfigModule> {\n    return {\n      ngModule: AppConfigModule,\n      providers: [\n        {\n          provide: APP_CONFIG_TOKEN,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CurrencyConfigPipe } from './pipes/currency-config.pipe';\nimport { DateConfigPipe } from './pipes/date-config.pipe';\nimport { DateTimeConfigPipe } from './pipes/date-time-config.pipe';\nimport { TimeConfigPipe } from './pipes/time-config.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    CurrencyConfigPipe,\n    DateConfigPipe,\n    TimeConfigPipe,\n    DateTimeConfigPipe\n  ],\n  exports: [\n    CurrencyConfigPipe,\n    DateConfigPipe,\n    TimeConfigPipe,\n    DateTimeConfigPipe\n  ]\n})\nexport class AppConfigUtilsModule {}\n"]}