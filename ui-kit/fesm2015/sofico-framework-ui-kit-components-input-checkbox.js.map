{"version":3,"file":"sofico-framework-ui-kit-components-input-checkbox.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-checkbox/input-checkbox.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-checkbox/input-checkbox.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-checkbox/sofico-framework-ui-kit-components-input-checkbox.ts"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\n\nlet uniqueCheckboxCounter = 0;\n\n@Component({\n  selector: 'sof-input-checkbox',\n  template: `\n    <div class=\"custom-control custom-checkbox\">\n      <input\n        #inputElement\n        type=\"checkbox\"\n        [attr.id]=\"labelForId\"\n        [disabled]=\"isDisabled\"\n        class=\"custom-control-input\"\n        [class.is-invalid]=\"\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        \"\n        [checked]=\"internalValue\"\n        [attr.value]=\"internalValue\"\n      />\n      <label\n        [for]=\"labelForId\"\n        class=\"custom-control-label\"\n        (click)=\"onToggle($event)\"\n      >\n        {{ label }}\n      </label>\n    </div>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputCheckboxComponent }\n  ]\n})\nexport class InputCheckboxComponent\n  implements ControlValueAccessor, OnDestroy, OnSofFocus {\n  /**\n   * The translated label of the input.\n   */\n  @Input() label: string;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * Determines if the input is checked or not.\n   */\n  @Input() set selected(value: boolean) {\n    this.writeValue(value);\n    this.calculateIndeterminate();\n  }\n\n  /**\n   * Determines if the input is indeterminate or not.\n   * Checked true will always prevail over indeterminate true.\n   */\n  @Input() set indeterminate(value: boolean) {\n    this.isIndeterminate = value;\n    this.calculateIndeterminate();\n  }\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<boolean>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  @ViewChild('inputElement', { static: true }) inputElement: ElementRef;\n\n  internalValue: boolean = null;\n  isIndeterminate = false;\n  propagateChange: any;\n  propagateTouch: any;\n  labelForId = 'sof-input-checkbox-' + uniqueCheckboxCounter; // generate unique id\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    ++uniqueCheckboxCounter;\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: boolean): void {\n    this.internalValue = value;\n  }\n\n  onToggle(event: any): void {\n    // Prevent native functionality of browser input-checkbox\n    event.preventDefault();\n\n    if (!this.isDisabled) {\n      this.calculateIndeterminate();\n      const newValue = !this.internalValue;\n      if (this.propagateChange) {\n        this.internalValue = newValue;\n        this.propagateChange(newValue);\n      }\n      this.changeValue.emit(newValue);\n    }\n\n    // Must happen after propagateChange, if not it will not work properly when formControl has set updateOn: 'blur'.\n    // When updateOn: 'blur' is set the form control will only emit a value once the control is out of focus.\n    // By calling propagateTouch before propagateChange the old value is used as initial value instead of the new value.\n    // It seems that every propagateChange is ignored once the propagateTouch is triggered.\n    // The problem doesn't occur when updateOn is 'change' (default) as the control is not limited by propagateTouch.\n    this.onTouch();\n  }\n\n  onTouch(): void {\n    this.touch.emit();\n\n    if (!this.isDisabled && this.propagateTouch) {\n      this.propagateTouch();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  private calculateIndeterminate(): void {\n    this.inputElement.nativeElement.indeterminate =\n      this.isIndeterminate && !this.internalValue;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InputCheckboxComponent } from './input-checkbox.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [InputCheckboxComponent],\n  exports: [InputCheckboxComponent]\n})\nexport class InputCheckboxModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}