{"version":3,"file":"sofico-framework-ui-kit-components-input-number.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-number/input-number.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-number/input-number.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-number/sofico-framework-ui-kit-components-input-number.ts"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  Host,\n  OnDestroy,\n  Optional,\n  ViewChild\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport { InputNumberBaseDirective } from '@sofico-framework/ui-kit/components/number-base';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\n\n@Component({\n  selector: 'sof-input-number',\n  template: `\n    <input\n      #inputElement\n      type=\"text\"\n      inputmode=\"decimal\"\n      [attr.id]=\"labelForId\"\n      [value]=\"internalValue\"\n      class=\"form-control\"\n      [class.is-invalid]=\"\n        invalid ||\n        (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n      \"\n      [placeholder]=\"placeholder\"\n      [disabled]=\"isDisabled\"\n      (input)=\"onChange($event.target?.value)\"\n      (blur)=\"onTouch()\"\n    />\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputNumberComponent }\n  ]\n})\nexport class InputNumberComponent\n  extends InputNumberBaseDirective\n  implements OnDestroy, OnSofFocus {\n  @ViewChild('inputElement') inputElement: ElementRef;\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    super();\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InputNumberComponent } from './input-number.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [InputNumberComponent],\n  exports: [InputNumberComponent]\n})\nexport class InputNumberModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;MAwCa,oBACX,SAAQ,wBAAwB;IAGhC,YACqB,IAAmB,EACX,SAAoB;QAE/C,KAAK,EAAE,CAAC;QAHW,SAAI,GAAJ,IAAI,CAAe;QACX,cAAS,GAAT,SAAS,CAAW;QAG/C,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;SAChC;KACF;IAED,QAAQ;QACN,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACzC;IAED,WAAW;;QACT,UAAI,IAAI,CAAC,SAAS,0CAAE,aAAa,EAAE;;;;;;YAMjC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,GAAG,SAAQ,CAAC;SACpD;KACF;;;YAnDF,SAAS,SAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,QAAQ,EAAE;;;;;;;;;;;;;;;;;GAiBT;gBACD,SAAS,EAAE;oBACT,EAAE,OAAO,EAAE,mBAAmB,EAAE,WAAW,EAAE,oBAAoB,EAAE;iBACpE;aACF;;;YA9BQ,aAAa,uBAoCjB,QAAQ;YArCJ,SAAS,uBAsCb,QAAQ,YAAI,IAAI;;;2BAHlB,SAAS,SAAC,cAAc;;;MClCd,iBAAiB;;;YAL7B,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,YAAY,EAAE,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,CAAC,oBAAoB,CAAC;aAChC;;;ACRD;;;;;;"}