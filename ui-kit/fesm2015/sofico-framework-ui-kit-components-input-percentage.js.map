{"version":3,"file":"sofico-framework-ui-kit-components-input-percentage.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-percentage/input-percentage.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-percentage/input-percentage.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-percentage/sofico-framework-ui-kit-components-input-percentage.ts"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  Host,\n  OnDestroy,\n  Optional,\n  ViewChild\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport { InputNumberBaseDirective } from '@sofico-framework/ui-kit/components/number-base';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\nimport { Big } from 'big.js';\n\n@Component({\n  selector: 'sof-input-percentage',\n  template: `\n    <div class=\"input-group\">\n      <div class=\"input-group-prepend\">\n        <span class=\"input-group-text\">%</span>\n      </div>\n      <input\n        #inputElement\n        type=\"text\"\n        inputmode=\"decimal\"\n        [attr.id]=\"labelForId\"\n        [value]=\"internalValue\"\n        class=\"form-control\"\n        [class.is-invalid]=\"\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        \"\n        [placeholder]=\"placeholder\"\n        [disabled]=\"isDisabled\"\n        (input)=\"onChange($event.target?.value)\"\n        (blur)=\"onTouch()\"\n      />\n    </div>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputPercentageComponent }\n  ]\n})\nexport class InputPercentageComponent\n  extends InputNumberBaseDirective\n  implements OnDestroy, OnSofFocus {\n  @ViewChild('inputElement') inputElement: ElementRef;\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    super();\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  writeValue(obj: any): void {\n    // multiply value by 100 before writing it to the input\n    let multipliedBy100 = null;\n    try {\n      multipliedBy100 = +new Big(obj).mul(100);\n    } catch (error) {}\n    super.writeValue(multipliedBy100);\n  }\n\n  onChange(value: string): void {\n    // update internal value\n    const internalValue = this.updateValueByUserInput(value);\n\n    let inputValueAsDecimalDividedBy100 = null;\n    try {\n      inputValueAsDecimalDividedBy100 = +new Big(\n        internalValue.replace(/,/g, '.')\n      ).div(100);\n    } catch (error) {}\n\n    // emit value\n    this.changeValue.emit(inputValueAsDecimalDividedBy100);\n\n    // propagate the change, divided by 100\n    if (this.propagateChange && internalValue !== undefined) {\n      this.propagateChange(\n        inputValueAsDecimalDividedBy100 === null\n          ? null\n          : inputValueAsDecimalDividedBy100\n      );\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { InputPercentageComponent } from './input-percentage.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [InputPercentageComponent],\n  exports: [InputPercentageComponent]\n})\nexport class InputPercentageModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;;MA8Ca,wBACX,SAAQ,wBAAwB;IAGhC,YACqB,IAAmB,EACX,SAAoB;QAE/C,KAAK,EAAE,CAAC;QAHW,SAAI,GAAJ,IAAI,CAAe;QACX,cAAS,GAAT,SAAS,CAAW;QAG/C,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;SAChC;KACF;IAED,QAAQ;QACN,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACzC;IAED,WAAW;;QACT,UAAI,IAAI,CAAC,SAAS,0CAAE,aAAa,EAAE;;;;;;YAMjC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,GAAG,SAAQ,CAAC;SACpD;KACF;IAED,UAAU,CAAC,GAAQ;;QAEjB,IAAI,eAAe,GAAG,IAAI,CAAC;QAC3B,IAAI;YACF,eAAe,GAAG,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAC1C;QAAC,OAAO,KAAK,EAAE,GAAE;QAClB,KAAK,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;KACnC;IAED,QAAQ,CAAC,KAAa;;QAEpB,MAAM,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QAEzD,IAAI,+BAA+B,GAAG,IAAI,CAAC;QAC3C,IAAI;YACF,+BAA+B,GAAG,CAAC,IAAI,GAAG,CACxC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CACjC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACZ;QAAC,OAAO,KAAK,EAAE,GAAE;;QAGlB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;;QAGvD,IAAI,IAAI,CAAC,eAAe,IAAI,aAAa,KAAK,SAAS,EAAE;YACvD,IAAI,CAAC,eAAe,CAClB,+BAA+B,KAAK,IAAI;kBACpC,IAAI;kBACJ,+BAA+B,CACpC,CAAC;SACH;KACF;;;YAzFF,SAAS,SAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;GAsBT;gBACD,SAAS,EAAE;oBACT,EAAE,OAAO,EAAE,mBAAmB,EAAE,WAAW,EAAE,wBAAwB,EAAE;iBACxE;aACF;;;YApCQ,aAAa,uBA0CjB,QAAQ;YA3CJ,SAAS,uBA4Cb,QAAQ,YAAI,IAAI;;;2BAHlB,SAAS,SAAC,cAAc;;;MCvCd,qBAAqB;;;YALjC,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,EAAE,mBAAmB,CAAC;gBAC5C,YAAY,EAAE,CAAC,wBAAwB,CAAC;gBACxC,OAAO,EAAE,CAAC,wBAAwB,CAAC;aACpC;;;ACTD;;;;;;"}