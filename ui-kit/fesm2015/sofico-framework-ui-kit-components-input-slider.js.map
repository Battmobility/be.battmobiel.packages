{"version":3,"file":"sofico-framework-ui-kit-components-input-slider.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-slider/input-slider.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-slider/pipes/label-format-fn.pipe.ts","../../../../projects/sofico-framework/ui-kit/components/input-slider/input-slider.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-slider/sofico-framework-ui-kit-components-input-slider.ts"],"sourcesContent":["import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, NgControl } from '@angular/forms';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\nimport { isNullOrUndefined, isNumber } from '@sofico-framework/utils';\nimport { NzMarks } from 'ng-zorro-antd/slider';\nimport { takeUntilDestroy, UntilDestroy } from 'ngx-reactivetoolkit';\n\n@UntilDestroy()\n@Component({\n  selector: 'sof-input-slider',\n  styleUrls: ['./input-slider.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <nz-slider\n      #inputElement\n      [ngModel]=\"internalValue\"\n      [nzRange]=\"localRange\"\n      [nzMin]=\"localMinValue\"\n      [nzMax]=\"localMaxValue\"\n      [nzMarks]=\"nzMarks\"\n      [nzDisabled]=\"isDisabled\"\n      [nzReverse]=\"localReversed\"\n      nzTooltipVisible=\"never\"\n      (ngModelChange)=\"onChange($event, true)\"\n      (nzOnAfterChange)=\"onTouch($event)\"\n    ></nz-slider>\n    <div class=\"marks\">\n      <div>\n        <ng-container *ngIf=\"marks === 'both' || marks === 'min'\">\n          {{ localMinValue | sofLabelFormatFn: localLabelFormatFn }}\n        </ng-container>\n      </div>\n      <div>\n        <ng-container *ngIf=\"marks === 'both' || marks === 'max'\">\n          {{ localMaxValue | sofLabelFormatFn: localLabelFormatFn }}\n        </ng-container>\n      </div>\n    </div>\n    <div\n      class=\"d-flex mt-2\"\n      [class.justify-content-between]=\"localRange\"\n      [class.justify-content-end]=\"!localReversed\"\n    >\n      <sof-input-number\n        *ngIf=\"localRange\"\n        class=\"slider-input\"\n        [formControl]=\"localValueForm.controls.minValue\"\n        [maxFraction]=\"maxFraction\"\n        [isDisabled]=\"isDisabled\"\n        (touch)=\"onLoseFocus()\"\n      ></sof-input-number>\n      <sof-input-number\n        class=\"slider-input\"\n        [formControl]=\"localValueForm.controls.maxValue\"\n        [maxFraction]=\"maxFraction\"\n        [isDisabled]=\"isDisabled\"\n        (touch)=\"onLoseFocus()\"\n      ></sof-input-number>\n    </div>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputSliderComponent }\n  ]\n})\nexport class InputSliderComponent\n  implements ControlValueAccessor, OnDestroy, OnSofFocus, OnInit {\n  nzMarks: NzMarks;\n\n  propagateChange: any;\n  propagateTouch: any;\n  localMinValue: number;\n  localMaxValue: number;\n  localReversed = false;\n  localRange = false;\n\n  // This is the value of the slider that gets used in the nzSlider. This value\n  // is also set to any as the template can't cope with number|[number, number]\n  internalValue: any;\n\n  // In case of reversing the slider, we'll need to manipulate the real internal\n  // value to keep the min value on the left. That manipulated value is stored\n  // here. This value is also the value that gets used in the FormControl.\n  calculatedValue: any;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   *  Determines if the input will allow two boundary values to be picked.\n   */\n  @Input() set range(isRange: boolean) {\n    this.localRange = isRange;\n    this.updateLocalValueForm();\n  }\n\n  /**\n   * Determines if the selected part of the slider is to the left\n   * or to the right of the selected value\n   * false => |=====O-----|   [default]\n   * true =>  |-----O=====|\n   */\n  @Input() set reversed(isReversed: boolean) {\n    this.localReversed = isReversed;\n    this.calculateValue(this.calculatedValue);\n  }\n\n  /**\n   *  Visibility of marks\n   */\n  @Input() marks: 'neither' | 'min' | 'max' | 'both' = 'both';\n\n  /**\n   * The maximum amount of decimals allowed in the input fields\n   */\n  @Input() maxFraction = 0;\n\n  /**\n   * Determines the value of the control.\n   */\n  @Input() set value(value: number | [number, number]) {\n    this.writeValue(value);\n  }\n\n  /**\n   * Determines the min value of the slider.\n   */\n  @Input() set minValue(value: number) {\n    this.localMinValue = value;\n    this.calculateValue(this.calculatedValue);\n    this.nzMarks = this.calculateMarks(this.localMinValue, this.localMaxValue);\n  }\n\n  /**\n   * Determines the max value of the slider.\n   */\n  @Input() set maxValue(value: number) {\n    this.localMaxValue = value;\n    this.calculateValue(this.calculatedValue);\n    this.nzMarks = this.calculateMarks(this.localMinValue, this.localMaxValue);\n  }\n\n  /**\n   * Determines the display format of the values.\n   */\n  @Input() set labelFormatFn(fn: (value: number) => string) {\n    this.localLabelFormatFn = fn;\n    this.nzMarks = this.calculateMarks(this.localMinValue, this.localMaxValue);\n  }\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<number | [number, number]>();\n\n  /**\n   * EventEmitter that will emit the value after release.\n   */\n  @Output() valueAfterRelease = new EventEmitter<number | [number, number]>();\n\n  @ViewChild('inputElement', { read: ElementRef }) inputElement: ElementRef;\n\n  localValueForm = this.fb.group({\n    minValue: [],\n    maxValue: []\n  });\n\n  localLabelFormatFn: (value: number) => string = (value: number) => `${value}`;\n\n  constructor(\n    @Optional() @Host() public ngControl: NgControl,\n    private changeDetectorRef: ChangeDetectorRef,\n    private fb: FormBuilder\n  ) {\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  ngOnInit(): void {\n    // This logic interprets the values in the localValueForm and uses some\n    // logic to get the correct values sent to the onChange method\n    this.localValueForm.valueChanges\n      .pipe(takeUntilDestroy(this))\n      .subscribe(values => {\n        let localValue;\n\n        if (this.localRange) {\n          localValue = [values.minValue, values.maxValue];\n        } else {\n          localValue = values.maxValue;\n        }\n\n        if (this.localRange) {\n          if (\n            !(\n              isNullOrUndefined(localValue[0]) ||\n              isNullOrUndefined(localValue[1])\n            ) &&\n            localValue[0] > localValue[1]\n          ) {\n            localValue.reverse();\n          }\n          // If the value is null we will take the localMinValue or\n          // localMaxValue instead. Same goes for if the value exceeds the\n          // minValue or maxValue.\n          if (\n            isNullOrUndefined(localValue[0]) ||\n            localValue[0] < this.localMinValue\n          ) {\n            localValue[0] = this.localMinValue;\n          } else if (\n            isNullOrUndefined(localValue[1]) ||\n            localValue[1] > this.localMaxValue\n          ) {\n            localValue[1] = this.localMaxValue;\n          }\n\n          // If the value didn't change, don't trigger the onChange\n          if (\n            localValue[0] === this.internalValue[0] &&\n            localValue[1] === this.internalValue[1]\n          ) {\n            return;\n          }\n        } else {\n          if (isNullOrUndefined(localValue)) {\n            localValue = this.localReversed\n              ? this.localMinValue\n              : this.localMaxValue;\n          } else if (localValue < this.localMinValue) {\n            localValue = this.localMinValue;\n          } else if (localValue > this.localMaxValue) {\n            localValue = this.localMaxValue;\n          }\n\n          if (this.localReversed) {\n            localValue = this.calculateReversedValue(localValue);\n          }\n\n          // If the value didn't change, don't trigger the onChange\n          if (localValue === this.internalValue) {\n            return;\n          }\n        }\n\n        this.onChange(localValue);\n      });\n  }\n\n  onLoseFocus(): void {\n    // Syncing the localValueForm with the actual values\n    this.updateLocalValueForm(true);\n  }\n\n  sofFocus(): void {\n    const handles = this.inputElement.nativeElement.getElementsByClassName(\n      'ant-slider-handle'\n    );\n    const handle = handles[handles.length - 1];\n    handle.focus();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: number | [number, number]): void {\n    this.internalValue = value ?? null;\n    this.calculatedValue = this.internalValue;\n    this.calculateValue(this.calculatedValue);\n    this.updateLocalValueForm();\n  }\n\n  onChange(value: number | [number, number], isSlider: boolean = false): void {\n    if (!this.isDisabled) {\n      const newInternalValue = value ?? null;\n\n      if (this.localReversed && !isNullOrUndefined(newInternalValue)) {\n        this.calculatedValue = this.calculateReversedValue(\n          newInternalValue as number\n        );\n      } else {\n        this.calculatedValue = newInternalValue;\n      }\n\n      if (isSlider) {\n        this.updateLocalValueForm();\n      }\n\n      // emit value\n      this.changeValue.emit(this.calculatedValue);\n\n      // propagate the change\n      if (this.propagateChange) {\n        this.internalValue = newInternalValue;\n        this.propagateChange(this.calculatedValue);\n      }\n    }\n  }\n\n  onTouch(value: number | [number, number]): void {\n    this.valueAfterRelease.emit(value);\n\n    if (!this.isDisabled && this.propagateTouch) {\n      this.propagateTouch();\n    }\n  }\n\n  setDisabledState(value: boolean): void {\n    this.isDisabled = value;\n  }\n\n  // If the slider needs to be reversed, this will check if all variables needed\n  // for the calculation are available. If that is the case, the internal value\n  // will be changed to it's correct value.\n  private calculateValue(value: number | [number, number]): void {\n    if (!!value) {\n      // it doesn't make sense to reverse a slider if you have a range\n      // so this will only support a single value\n      if (typeof value === 'number') {\n        if (this.localReversed) {\n          if (!!this.localMaxValue && !!this.localMinValue) {\n            this.internalValue = this.calculateReversedValue(value);\n          }\n        }\n      }\n    }\n  }\n\n  private calculateReversedValue(value: number): number {\n    return this.localMaxValue + this.localMinValue - (value as number);\n  }\n\n  private calculateMarks(min: number, max: number): { [key: number]: string } {\n    const marks = {};\n\n    if (this.marks === 'neither') {\n      return marks;\n    }\n\n    if (isNumber(min) && (this.marks === 'both' || this.marks === 'min')) {\n      // Using nzMarks together with nzMin the mark values are only displayed\n      // when the mark matches with the nzMin value as a string.\n      // By applying an empty string as mark. They will never match and the mark value is not shown.\n      // This is intended as we display the values our self.\n      marks[min] = '';\n    }\n\n    if (isNumber(max) && (this.marks === 'both' || this.marks === 'max')) {\n      // Using nzMarks together with nzMax the mark values are only displayed\n      // when the mark matches with the nzMax value as a string.\n      // By applying an empty string as mark. They will never match and the mark value is not shown.\n      // This is intended as we display the values our self.\n      marks[max] = '';\n    }\n\n    return marks;\n  }\n\n  private updateLocalValueForm(emitEvent: boolean = false): void {\n    if (this.localRange) {\n      this.localValueForm.reset(\n        {\n          minValue: this.calculatedValue?.[0],\n          maxValue: this.calculatedValue?.[1]\n        },\n        { emitEvent }\n      );\n    } else {\n      this.localValueForm.reset(\n        {\n          maxValue: this.calculatedValue\n        },\n        { emitEvent }\n      );\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'sofLabelFormatFn' })\nexport class LabelFormatFnPipe implements PipeTransform {\n  transform(value: number, fn: (value: number) => string): any {\n    return fn(value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { InputCurrencyModule } from '@sofico-framework/ui-kit/components/input-currency';\nimport { InputNumberModule } from '@sofico-framework/ui-kit/components/input-number';\nimport { NzSliderModule } from 'ng-zorro-antd/slider';\nimport { InputSliderComponent } from './input-slider.component';\nimport { LabelFormatFnPipe } from './pipes/label-format-fn.pipe';\n\n@NgModule({\n  imports: [\n    NzSliderModule,\n    ReactiveFormsModule,\n    FormsModule,\n    CommonModule,\n    InputNumberModule,\n    InputCurrencyModule\n  ],\n  declarations: [InputSliderComponent, LabelFormatFnPipe],\n  exports: [InputSliderComponent]\n})\nexport class InputSliderModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}