{"version":3,"file":"sofico-framework-ui-kit-components-input-checkbox-tree.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-checkbox-tree/input-checkbox-tree.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-checkbox-tree/input-checkbox-tree.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-checkbox-tree/sofico-framework-ui-kit-components-input-checkbox-tree.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CheckboxTreeOptionItem } from './types/checkbox-tree-option-item.type';\nimport { CheckboxTreeResultItem } from './types/checkbox-tree-result-item.type';\n\ninterface EnhancedOption {\n  id: string;\n  label: string;\n  children?: EnhancedOption[];\n  expanded?: boolean;\n  selected?: boolean;\n  indeterminate?: boolean;\n}\n\n@Component({\n  selector: 'sof-input-checkbox-tree',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./input-checkbox-tree.component.scss'],\n  template: `\n    <div\n      *ngFor=\"let parent of enhancedOptions$ | async; trackBy: trackByFn\"\n      class=\"mb-2\"\n    >\n      <div class=\"d-flex align-items-center\">\n        <sof-input-checkbox\n          [label]=\"parent.label\"\n          [selected]=\"parent?.selected\"\n          [indeterminate]=\"parent?.indeterminate\"\n          [isDisabled]=\"isDisabled\"\n          class=\"d-block mr-2\"\n          (changeValue)=\"onChange(null, parent)\"\n        ></sof-input-checkbox>\n        <button\n          class=\"btn btn-plain ml-1\"\n          *ngIf=\"parent?.children?.length > 0\"\n          (click)=\"toggleCollapseState(parent)\"\n          type=\"button\"\n        >\n          <sof-svg-icon\n            class=\"icon-toggle\"\n            size=\"12\"\n            [icon]=\"'icon-chevron-' + (parent.expanded ? 'up' : 'down')\"\n          ></sof-svg-icon>\n        </button>\n      </div>\n      <div *ngIf=\"parent?.expanded\" class=\"pl-4\">\n        <ng-container *ngFor=\"let child of parent.children; trackBy: trackByFn\">\n          <sof-input-checkbox\n            class=\"d-block mt-1\"\n            [label]=\"child.label\"\n            [selected]=\"child.selected\"\n            [isDisabled]=\"isDisabled\"\n            (changeValue)=\"onChange(parent, child)\"\n          ></sof-input-checkbox>\n        </ng-container>\n      </div>\n    </div>\n  `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: InputCheckboxTreeComponent,\n      multi: true\n    }\n  ]\n})\nexport class InputCheckboxTreeComponent implements ControlValueAccessor {\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  options$ = new BehaviorSubject<CheckboxTreeOptionItem[]>([]);\n\n  /**\n   *  Sets the the available options (checkboxes).\n   */\n  @Input() set options(v: CheckboxTreeOptionItem[]) {\n    this.options$.next(v);\n  }\n\n  values$ = new BehaviorSubject<CheckboxTreeResultItem[]>([]);\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * Determines if the input is checked or not.\n   */\n  @Input() set value(value: CheckboxTreeResultItem[]) {\n    this.writeValue(value);\n  }\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<CheckboxTreeResultItem[]>();\n\n  /**\n   * EventEmitter that will emit the options who have expanded and who not.\n   */\n  @Output() changeOptionExpanded = new EventEmitter<CheckboxTreeOptionItem[]>();\n\n  enhancedOptions$: Observable<EnhancedOption[]> = combineLatest([\n    this.options$.pipe(filter(v => !!v)),\n    this.values$\n  ]).pipe(\n    map(([options, values]) => {\n      return options.map(option => {\n        const hasSelectedChildren = option.children?.some(childOption => {\n          return !!values\n            ?.find(v => v.id === option.id)\n            ?.children?.find(childValue => childValue.id === childOption.id)\n            ?.selected;\n        });\n        return {\n          id: option.id,\n          expanded: option.expanded,\n          indeterminate: hasSelectedChildren,\n          label: option.label,\n          selected: !!values?.find(v => v.id === option.id && v.selected),\n          children: option.children?.map(childOption => {\n            return {\n              id: childOption.id,\n              label: childOption.label,\n              selected: !!values\n                ?.find(v => v.id === option.id)\n                ?.children?.find(childValue => childValue.id === childOption.id)\n                ?.selected\n            };\n          })\n        };\n      });\n    })\n  );\n\n  propagateChange: any;\n  propagateTouch: any;\n\n  trackByFn = i => i;\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  writeValue(tree: CheckboxTreeResultItem[]): void {\n    this.values$.next(tree);\n  }\n\n  onChange(parent: EnhancedOption, current: EnhancedOption): void {\n    if (!this.isDisabled) {\n      const oldValues = this.values$.getValue();\n      let updatedParent;\n      if (parent === null) {\n        // update parent\n        updatedParent = {\n          id: current.id,\n          selected: !current?.selected,\n          children: current.children.map(child => ({\n            id: child.id,\n            selected: false\n          }))\n        };\n      } else {\n        updatedParent = {\n          id: parent.id,\n          selected: false,\n          children: parent.children?.map(child =>\n            child?.id === current?.id\n              ? { id: current.id, selected: !current?.selected }\n              : { id: child.id, selected: child.selected }\n          )\n        };\n      }\n      const newValues = oldValues.map(value =>\n        value?.id === updatedParent.id ? updatedParent : value\n      );\n      this.values$.next(newValues);\n      if (this.propagateChange) {\n        this.propagateChange(newValues);\n      }\n    }\n  }\n\n  toggleCollapseState(option: CheckboxTreeOptionItem): void {\n    const options = this.options$\n      .getValue()\n      .map(o =>\n        o.id === option.id ? { ...option, expanded: !o.expanded } : o\n      );\n    this.options$.next(options);\n    this.changeOptionExpanded.emit(options);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InputCheckboxModule } from '@sofico-framework/ui-kit/components/input-checkbox';\nimport { SvgIconModule } from '@sofico-framework/ui-kit/components/svg-icon';\nimport { InputCheckboxTreeComponent } from './input-checkbox-tree.component';\n\n@NgModule({\n  imports: [CommonModule, InputCheckboxModule, SvgIconModule],\n  declarations: [InputCheckboxTreeComponent],\n  exports: [InputCheckboxTreeComponent]\n})\nexport class InputCheckboxTreeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}