{"version":3,"file":"sofico-framework-ui-kit-components-input-time-picker.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-time-picker/input-time-picker.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-time-picker/input-time-picker.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-time-picker/sofico-framework-ui-kit-components-input-time-picker.ts"],"sourcesContent":["import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\nimport { TimeFormatEnum } from '@sofico-framework/utils';\nimport { Changes, takeUntilDestroy, UntilDestroy } from 'ngx-reactivetoolkit';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\n@UntilDestroy()\n@Component({\n  selector: 'sof-input-time-picker',\n  styleUrls: ['./input-time-picker.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <nz-time-picker\n      #inputElement\n      [@.disabled]=\"true\"\n      [formControl]=\"internalFormControl\"\n      [nzSize]=\"size\"\n      [nzFormat]=\"timeFormat\"\n      [nzPlaceHolder]=\"placeHolder\"\n      [nzUse12Hours]=\"use12Hours\"\n      [nzHourStep]=\"hourStep\"\n      [nzMinuteStep]=\"minuteStep\"\n      [nzSecondStep]=\"secondStep\"\n      [nzAllowEmpty]=\"allowEmpty\"\n      [nzDefaultOpenValue]=\"defaultOpenValue\"\n      [nzDisabled]=\"isDisabled\"\n      [nzDisabledHours]=\"disabledHours$ | async\"\n      [nzDisabledMinutes]=\"disabledMinutes$ | async\"\n      [nzDisabledSeconds]=\"disabledSeconds$ | async\"\n      [class.is-invalid]=\"\n        invalid ||\n        (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n      \"\n      (nzOpenChange)=\"onTouch($event)\"\n    ></nz-time-picker>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputTimePickerComponent }\n  ]\n})\nexport class InputTimePickerComponent\n  implements OnInit, OnDestroy, OnChanges, ControlValueAccessor, OnSofFocus {\n  // Size of Select input\n  @Input() size = 'large';\n\n  // TimeFormat for enum\n  @Input() timeFormat: TimeFormatEnum = TimeFormatEnum.HH_TIME_M;\n\n  // Display as 12 hours format and set TimeFormatEnum to H_TIME_M or H_TIME_M_S\n  @Input() use12Hours = false;\n\n  // Placeholder of date input\n  @Input() placeHolder: string;\n\n  // Interval between hours in time-picker-view\n  @Input() hourStep: number;\n\n  // Interval between minutes in time-picker-view\n  @Input() minuteStep: number;\n\n  // Interval between seconds in time-picker-view\n  @Input() secondStep: number;\n\n  // Allow clearing text\n  @Input() allowEmpty = true;\n\n  // Default value when you open the panel when formControl is nul\n  @Input() defaultOpenValue: Date = new Date();\n\n  /**\n   * The id of the input to connect to a label tag.\n   * currently not supported\n   */\n  @Input() labelForId: string;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid = false;\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<Date>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  /**\n   * Determines the min time of the control.\n   */\n  @Input() minTime: Date;\n\n  /**\n   * Determines the max time of the control.\n   */\n  @Input() maxTime: Date;\n\n  @Changes('minTime') minTime$: Observable<Date>;\n  @Changes('maxTime') maxTime$: Observable<Date>;\n\n  @ViewChild('inputElement', { read: ElementRef }) inputElement: ElementRef;\n\n  disabledHours$: Observable<() => number[]>;\n  disabledMinutes$: Observable<(hour: number) => number[]>;\n  disabledSeconds$: Observable<(hour: number, minute: number) => number[]>;\n\n  internalFormControl = new FormControl(null);\n  propagateChange: any;\n  propagateTouch: any;\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.getElementsByTagName('input')[0].focus();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  ngOnChanges(): void {}\n\n  ngOnInit(): void {\n    this.internalFormControl.valueChanges\n      .pipe(takeUntilDestroy(this))\n      .subscribe(value => {\n        if (!this.isDisabled) {\n          this.changeValue.emit(value);\n\n          if (this.propagateChange) {\n            this.propagateChange(value);\n          }\n        }\n      });\n\n    this.disabledHours$ = combineLatest([\n      this.minTime$.pipe(startWith(null)),\n      this.maxTime$.pipe(startWith(null))\n    ]).pipe(\n      map(([minTime, maxTime]) =>\n        this.getNgZorroDisabledHours(minTime, maxTime)\n      )\n    );\n\n    this.disabledMinutes$ = combineLatest([\n      this.minTime$.pipe(startWith(null)),\n      this.maxTime$.pipe(startWith(null))\n    ]).pipe(\n      map(([minTime, maxTime]) =>\n        this.getNgZorroDisabledMinutes(minTime, maxTime)\n      )\n    );\n\n    this.disabledSeconds$ = combineLatest([\n      this.minTime$.pipe(startWith(null)),\n      this.maxTime$.pipe(startWith(null))\n    ]).pipe(\n      map(([minTime, maxTime]) =>\n        this.getNgZorroDisabledSeconds(minTime, maxTime)\n      )\n    );\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: any): void {\n    this.internalFormControl.setValue(value, { emitEvent: false });\n  }\n\n  onTouch($event: boolean): void {\n    if (!$event) {\n      this.touch.emit();\n      if (!this.isDisabled && this.propagateTouch) {\n        this.propagateTouch();\n      }\n    }\n  }\n\n  private getNgZorroDisabledHours(\n    minTime: Date,\n    maxTime: Date\n  ): () => number[] {\n    return () =>\n      [...Array(24).keys()].reduce((acc, hour) => {\n        if (!this.hourAllowed(minTime, maxTime, hour)) {\n          acc.push(hour);\n        }\n        return acc;\n      }, []);\n  }\n\n  private getNgZorroDisabledMinutes(\n    minTime: Date,\n    maxTime: Date\n  ): (hour: number) => number[] {\n    return hour =>\n      [...Array(60).keys()].reduce((acc, minute) => {\n        if (!this.hourAllowed(minTime, maxTime, hour)) {\n          acc.push(minute);\n        } else if (!this.minuteAllowed(minTime, maxTime, hour, minute)) {\n          acc.push(minute);\n        }\n        return acc;\n      }, []);\n  }\n\n  private getNgZorroDisabledSeconds(\n    minTime: Date,\n    maxTime: Date\n  ): (hour: number, minute: number) => number[] {\n    return (hour, minute) =>\n      [...Array(60).keys()].reduce((acc, second) => {\n        if (!this.hourAllowed(minTime, maxTime, hour)) {\n          acc.push(second);\n        } else if (!this.minuteAllowed(minTime, maxTime, hour, minute)) {\n          acc.push(second);\n        } else if (\n          !this.secondAllowed(minTime, maxTime, hour, minute, second)\n        ) {\n          acc.push(second);\n        }\n        return acc;\n      }, []);\n  }\n\n  private hourAllowed(minTime: Date, maxTime: Date, hour: number): boolean {\n    if (minTime || maxTime) {\n      if (maxTime && maxTime.getHours() < hour) {\n        return false;\n      } else if (minTime && minTime.getHours() > hour) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private minuteAllowed(\n    minTime: Date,\n    maxTime: Date,\n    hour: number,\n    minute: number\n  ): boolean {\n    if (minTime || maxTime) {\n      if (\n        maxTime &&\n        maxTime.getHours() === hour &&\n        maxTime.getMinutes() < minute\n      ) {\n        return false;\n      } else if (\n        minTime &&\n        minTime.getHours() === hour &&\n        minTime.getMinutes() > minute\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private secondAllowed(\n    minTime: Date,\n    maxTime: Date,\n    hour: number,\n    minute: number,\n    second: number\n  ): boolean {\n    if (minTime || maxTime) {\n      if (\n        maxTime &&\n        maxTime.getHours() === hour &&\n        maxTime.getMinutes() === minute &&\n        maxTime.getSeconds() < second\n      ) {\n        return false;\n      } else if (\n        minTime &&\n        minTime.getHours() === hour &&\n        minTime.getMinutes() === minute &&\n        minTime.getSeconds() > second\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NzTimePickerModule } from 'ng-zorro-antd/time-picker';\nimport { InputTimePickerComponent } from './input-time-picker.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NzTimePickerModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule\n  ],\n  declarations: [InputTimePickerComponent],\n  exports: [InputTimePickerComponent]\n})\nexport class InputTimePickerModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}