{"version":3,"file":"sofico-framework-ui-kit-components-input-chips.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-chips/validators/chips-regex.validator.ts","../../../../projects/sofico-framework/ui-kit/components/input-chips/input-chips.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-chips/input-chips.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-chips/sofico-framework-ui-kit-components-input-chips.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { isNullOrUndefined } from '@sofico-framework/utils';\n\nexport function chipsRegexValidator(regex: RegExp): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (\n      isNullOrUndefined(regex) ||\n      isNullOrUndefined(control?.value) ||\n      !Array.isArray(control.value)\n    ) {\n      return null;\n    }\n\n    if (control.value?.some(chip => !chip.match(regex))) {\n      return { invalidChips: true };\n    }\n\n    return null;\n  };\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl, ValidatorFn } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\nimport { isNullOrUndefined } from '@sofico-framework/utils';\nimport { chipsRegexValidator } from './validators/chips-regex.validator';\n\n@Component({\n  selector: 'sof-input-chips',\n  template: `\n    <div\n      class=\"form-control d-flex flex-row flex-wrap\"\n      [class.is-invalid]=\"\n        invalid ||\n        (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n      \"\n      tabindex=\"0\"\n      (focus)=\"chipInput.focus()\"\n    >\n      <sof-editable-chip\n        class=\"overflow-hidden\"\n        *ngFor=\"let chip of internalValue; let index = index\"\n        [label]=\"chip\"\n        [validationRegex]=\"internalValidationRegex\"\n        (editChip)=\"onChipEdit($event, index)\"\n        (removeChip)=\"onRemoveChip(index)\"\n        (invalidChip)=\"onInvalidChip($event)\"\n      ></sof-editable-chip>\n\n      <input\n        #chipInput\n        type=\"text\"\n        class=\"chip-input d-block flex-grow-1\"\n        [value]=\"internalChipValue\"\n        [placeholder]=\"placeholder\"\n        [disabled]=\"isDisabled\"\n        (blur)=\"onBlur()\"\n        (input)=\"onChipValueChange($event.target?.value)\"\n        (keydown.enter)=\"submitChip($event)\"\n      />\n    </div>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputChipsComponent }\n  ],\n  styleUrls: ['./input-chips.component.scss']\n})\nexport class InputChipsComponent\n  implements ControlValueAccessor, OnDestroy, OnSofFocus {\n  /**\n   * The id of the input to connect to a label tag.\n   */\n  @Input() labelForId: string;\n  /**\n   * The placeholder of the input.\n   */\n  @Input() placeholder = '';\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n  /**\n   * This regex is used for validation when creating new tags or editing one.\n   */\n  @Input() set validationRegex(regex: RegExp) {\n    if (!isNullOrUndefined(regex)) {\n      this.internalValidationRegex = regex;\n\n      if (this.ngControl) {\n        if (this.internalValidators) {\n          this.ngControl.control?.setValidators([\n            chipsRegexValidator(this.internalValidationRegex),\n            ...this.internalValidators\n          ]);\n        } else {\n          this.ngControl.control?.setValidators(\n            chipsRegexValidator(this.internalValidationRegex)\n          );\n        }\n        this.ngControl.control?.updateValueAndValidity();\n      }\n    }\n  }\n  /**\n   * This character will be used as separator when entering a list of values\n   */\n  @Input() separator: string;\n  /**\n   * IMPORTANT: validators for the control linked to this field need to be\n   * in this list to work\n   *\n   * This list is used together with a possible internal validator to build\n   * the full list of validators that get set on the control.\n   */\n  @Input() set validators(validators: ValidatorFn | ValidatorFn[] | null) {\n    if (!isNullOrUndefined(validators)) {\n      this.internalValidators = Array.isArray(validators)\n        ? validators\n        : [validators];\n\n      if (this.ngControl) {\n        if (this.internalValidationRegex) {\n          this.ngControl.control?.setValidators([\n            chipsRegexValidator(this.internalValidationRegex),\n            ...this.internalValidators\n          ]);\n        } else {\n          this.ngControl.control?.setValidators(this.internalValidators);\n        }\n        this.ngControl.control?.updateValueAndValidity();\n      }\n    }\n  }\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<string[]>();\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  @ViewChild('chipInput') chipInput: ElementRef;\n\n  internalValue: string[];\n  propagateChange: any;\n  propagateTouch: any;\n  internalChipValue: string = null;\n  internalValidators: ValidatorFn[];\n  internalValidationRegex: RegExp;\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  /**\n   * Determines the value of the control.\n   */\n  @Input() set value(value: string[]) {\n    this.writeValue(value);\n  }\n\n  sofFocus(): void {\n    this.chipInput.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: string[]): void {\n    this.internalValue = value ?? [];\n  }\n\n  onChange(value: string[]): void {\n    if (!this.isDisabled) {\n      const newInternalValue = value ?? [];\n\n      // propagate the change\n      if (this.propagateChange) {\n        this.internalValue = newInternalValue;\n        this.propagateChange(newInternalValue);\n      }\n\n      // emit value\n      this.changeValue.emit(newInternalValue);\n    }\n  }\n\n  submitChip(event: Event): void {\n    if (this.propagateTouch) {\n      this.propagateTouch();\n    }\n\n    if (!!this.internalChipValue) {\n      event?.preventDefault();\n    }\n\n    const internalChipValueTrimmed = this.internalChipValue?.trim();\n\n    if (!!internalChipValueTrimmed) {\n      if (\n        !isNullOrUndefined(this.separator) &&\n        internalChipValueTrimmed.indexOf(this.separator) >= 0\n      ) {\n        const itemList = internalChipValueTrimmed\n          .split(this.separator)\n          .filter(Boolean)\n          .map(item => item.trim());\n        if (itemList.length === 1) {\n          this.submitChipValueIfValid(itemList[0]);\n        } else {\n          this.internalValue = [...this.internalValue, ...itemList];\n\n          this.onChange(this.internalValue);\n          this.internalChipValue = '';\n        }\n      } else {\n        this.submitChipValueIfValid(internalChipValueTrimmed);\n      }\n    } else {\n      this.internalChipValue = '';\n    }\n  }\n\n  onChipValueChange(chipValue: string): void {\n    this.internalChipValue = chipValue;\n  }\n\n  onChipEdit(chipValue: string, index: number): void {\n    this.internalValue = [\n      ...this.internalValue.slice(0, index),\n      chipValue,\n      ...this.internalValue.slice(index + 1)\n    ];\n\n    this.onChange(this.internalValue);\n  }\n\n  onRemoveChip(chipIndex: number): void {\n    this.internalValue = this.internalValue.filter(\n      (value, index) => index !== chipIndex\n    );\n\n    this.onChange(this.internalValue);\n  }\n\n  onInvalidChip(invalid: boolean): void {\n    if (invalid) {\n      this.addRegexError();\n    } else {\n      this.removeRegexError();\n    }\n  }\n\n  onBlur(): void {\n    if (this.propagateTouch) {\n      this.propagateTouch();\n    }\n\n    this.internalChipValue = '';\n    this.removeRegexError();\n  }\n\n  private isValid(value: string): boolean {\n    if (this.internalValidationRegex) {\n      if (!!value && !value.match(this.internalValidationRegex)) {\n        this.addRegexError();\n        return false;\n      } else {\n        this.removeRegexError();\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  private submitChipValueIfValid(value: string): void {\n    if (this.isValid(value)) {\n      this.internalValue = [...this.internalValue, value];\n\n      this.onChange(this.internalValue);\n      this.internalChipValue = '';\n    } else {\n      this.internalChipValue = value;\n    }\n  }\n\n  private addRegexError(): void {\n    this.ngControl.control.setErrors({\n      ...this.ngControl.errors,\n      regex: true\n    });\n  }\n\n  private removeRegexError(): void {\n    // 'updateValueAndValidity' triggers valueChanges of control which isn't desired.\n    // By checking if the error exists we can reduce the number of valueChanges.\n    if (this.ngControl?.control?.hasError('regex')) {\n      this.ngControl?.control?.setErrors({\n        ...this.ngControl?.errors,\n        regex: null\n      });\n      this.ngControl?.control?.updateValueAndValidity();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EditableChipModule } from '@sofico-framework/ui-kit/components/editable-chip';\nimport { SvgIconModule } from '@sofico-framework/ui-kit/components/svg-icon';\nimport { NzTagModule } from 'ng-zorro-antd/tag';\nimport { InputChipsComponent } from './input-chips.component';\n\n@NgModule({\n  declarations: [InputChipsComponent],\n  imports: [\n    CommonModule,\n    SvgIconModule,\n    NzTagModule,\n    ReactiveFormsModule,\n    EditableChipModule\n  ],\n  exports: [InputChipsComponent]\n})\nexport class InputChipsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}