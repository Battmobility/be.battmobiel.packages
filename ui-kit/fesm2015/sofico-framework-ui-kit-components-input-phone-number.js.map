{"version":3,"file":"sofico-framework-ui-kit-components-input-phone-number.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-phone-number/utils/phone-numbers.utils.ts","../../../../projects/sofico-framework/ui-kit/components/input-phone-number/input-phone-number.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-phone-number/input-phone-number.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-phone-number/validators/phone-number.validator.ts","../../../../projects/sofico-framework/ui-kit/components/input-phone-number/sofico-framework-ui-kit-components-input-phone-number.ts"],"sourcesContent":["import { PhoneNumber, PhoneNumberUtil } from 'google-libphonenumber';\n\nconst phoneUtil: PhoneNumberUtil = PhoneNumberUtil.getInstance();\n\nexport function calculatePhoneNumber(\n  countryCodeISO2: string,\n  localCode: string\n): PhoneNumber {\n  if (countryCodeISO2 && localCode) {\n    try {\n      // can throw an Error, therefore it's inside a try-catch\n      return phoneUtil.parseAndKeepRawInput(localCode, countryCodeISO2);\n    } catch (e) {}\n  }\n\n  return null;\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\nimport {\n  PhoneNumber,\n  PhoneNumberFormat,\n  PhoneNumberUtil\n} from 'google-libphonenumber';\nimport { Country } from './types/country.type';\nimport { InputPhoneNumber } from './types/input-phone-number.type';\nimport { calculatePhoneNumber } from './utils/phone-numbers.utils';\n\n@Component({\n  selector: 'sof-input-phone-number',\n  styleUrls: ['./input-phone-number.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"input-group\">\n      <div class=\"input-group-prepend\">\n        <sof-input-single-select\n          [tc]=\"tc\"\n          [formControl]=\"singleSelectFormControl\"\n          [labelForId]=\"labelForId\"\n          [options]=\"countries\"\n          [selectorLabel]=\"selectorLabel\"\n          [selectorValue]=\"selectorValue\"\n          [clearable]=\"false\"\n          [isDisabled]=\"internalDisabled\"\n          [invalid]=\"\n            invalid ||\n            (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n          \"\n          (touch)=\"onTouch(false)\"\n          (changeValue)=\"onChangeCountryCode($event)\"\n        ></sof-input-single-select>\n      </div>\n      <input\n        #inputElement\n        type=\"text\"\n        class=\"form-control\"\n        [class.is-invalid]=\"\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        \"\n        [attr.disabled]=\"internalDisabled\"\n        [placeholder]=\"placeholder\"\n        [value]=\"internalValue.localCode\"\n        (blur)=\"onTouch()\"\n        (input)=\"onChangeLocalCode($event.target?.value)\"\n      />\n    </div>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputPhoneNumberComponent }\n  ]\n})\nexport class InputPhoneNumberComponent\n  implements ControlValueAccessor, OnDestroy, OnSofFocus {\n  @Input() tc: string;\n\n  /**\n   * The id of the input to connect to a label tag.\n   */\n  @Input() labelForId: string;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() set isDisabled(value: boolean) {\n    this.setDisabledState(value);\n  }\n\n  /**\n   * The placeholder of the input.\n   */\n  @Input() placeholder = '';\n\n  /**\n   * The countries that populate the list.\n   */\n  @Input() countries: Country[];\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * Determines the value of the control.\n   */\n  @Input() set value(value: InputPhoneNumber) {\n    this.writeValue(value);\n  }\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<InputPhoneNumber>();\n\n  @ViewChild('inputElement') inputElement: ElementRef;\n\n  private phoneUtil: PhoneNumberUtil = PhoneNumberUtil.getInstance();\n  private phoneNumber: PhoneNumber = null; // store the calculated phone number\n\n  singleSelectFormControl: FormControl = new FormControl(null); // used to be able to set default value\n  internalValue: InputPhoneNumber = {\n    countryCodeISO2: null,\n    localCode: null\n  };\n  internalDisabled: boolean;\n  propagateChange: any;\n  propagateTouch: any;\n\n  selectorLabel = (x: Country) =>\n    `+${x.countryPhoneCode} (${x.countryCodeISO3})`;\n  selectorValue = (x: Country) => x.countryCodeISO2;\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: InputPhoneNumber): void {\n    this.internalValue = {\n      countryCodeISO2: value?.countryCodeISO2 ?? null,\n      localCode: value?.localCode ?? null\n    };\n\n    // set the default value of the single select control\n    this.singleSelectFormControl.setValue(this.internalValue.countryCodeISO2);\n\n    this.phoneNumber = calculatePhoneNumber(\n      this.internalValue.countryCodeISO2,\n      this.internalValue.localCode\n    );\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.internalDisabled = isDisabled;\n\n    if (isDisabled) {\n      this.singleSelectFormControl.disable();\n    } else {\n      this.singleSelectFormControl.enable();\n    }\n  }\n\n  onChangeCountryCode(countryCodeISO2: string): void {\n    if (!this.isDisabled) {\n      this.phoneNumber = calculatePhoneNumber(\n        countryCodeISO2,\n        this.internalValue.localCode\n      );\n\n      this.emitAndPropagate(countryCodeISO2, this.internalValue.localCode);\n    }\n  }\n\n  onChangeLocalCode(localCode: string): void {\n    if (!this.isDisabled) {\n      this.phoneNumber = calculatePhoneNumber(\n        this.internalValue.countryCodeISO2,\n        localCode\n      );\n\n      this.emitAndPropagate(this.internalValue.countryCodeISO2, localCode);\n    }\n  }\n\n  onTouch(propagate: boolean = true): void {\n    if (this.phoneNumber) {\n      this.internalValue = this.formatPhoneNumber(\n        this.internalValue,\n        this.phoneNumber\n      );\n    }\n\n    if (!this.isDisabled && this.propagateTouch && propagate) {\n      this.propagateTouch();\n    }\n  }\n\n  /**\n   * format phone number, in control, in a more readable style (ex. 0475201414 => 0475 20 14 14)\n   */\n  private formatPhoneNumber(\n    value: InputPhoneNumber,\n    phoneNumber: PhoneNumber\n  ): InputPhoneNumber {\n    return {\n      ...value,\n      localCode: this.phoneUtil.format(phoneNumber, PhoneNumberFormat.NATIONAL)\n    };\n  }\n\n  private emitAndPropagate(countryCodeISO2: string, localCode: string): void {\n    const tmpCountryCodeISO2 = countryCodeISO2 ?? null;\n    const tmpLocalCode = localCode ?? null;\n    // number without country prefix and/or 0-prefix (ex. +320475201414 => 475201414)\n    // phone number is equal to null when 1 character is inside the control, so first default to localCode before we accept null as a value\n    const nationalPhoneNumber =\n      this.phoneNumber?.getNationalNumber()?.toString() ?? tmpLocalCode;\n\n    const checkForNullValues =\n      tmpLocalCode === null ||\n      tmpLocalCode === '' ||\n      tmpCountryCodeISO2 === null;\n\n    if (checkForNullValues) {\n      this.changeValue.emit(null);\n    } else {\n      this.changeValue.emit({\n        countryCodeISO2: tmpCountryCodeISO2,\n        localCode: nationalPhoneNumber\n      });\n    }\n\n    if (this.propagateChange) {\n      // only set internal value when in context of a reactive form, not when used standalone\n      this.internalValue = {\n        countryCodeISO2: tmpCountryCodeISO2,\n        localCode: tmpLocalCode\n      };\n      // emit new form value with corrected localCode\n      if (checkForNullValues) {\n        this.propagateChange(null);\n      } else {\n        this.propagateChange({\n          ...this.internalValue,\n          localCode: nationalPhoneNumber\n        });\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { InputSingleSelectModule } from '@sofico-framework/ui-kit/components/input-single-select';\nimport { InputPhoneNumberComponent } from './input-phone-number.component';\n\n@NgModule({\n  imports: [CommonModule, InputSingleSelectModule, ReactiveFormsModule],\n  declarations: [InputPhoneNumberComponent],\n  exports: [InputPhoneNumberComponent]\n})\nexport class InputPhoneNumberModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { PhoneNumberUtil } from 'google-libphonenumber';\nimport { calculatePhoneNumber } from '../utils/phone-numbers.utils';\n\nconst phoneUtil: PhoneNumberUtil = PhoneNumberUtil.getInstance();\n\nexport function phoneNumberValidator(\n  control: AbstractControl\n): ValidationErrors | null {\n  if (!control?.value?.localCode) {\n    return null;\n  }\n  const phoneNumber = calculatePhoneNumber(\n    control?.value?.countryCodeISO2,\n    control?.value?.localCode\n  );\n  if (\n    phoneNumber &&\n    phoneUtil.isValidNumberForRegion(\n      phoneNumber,\n      control.value?.countryCodeISO2\n    )\n  ) {\n    return null;\n  }\n\n  return {\n    phoneNumber: true\n  };\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["phoneUtil"],"mappings":"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"}