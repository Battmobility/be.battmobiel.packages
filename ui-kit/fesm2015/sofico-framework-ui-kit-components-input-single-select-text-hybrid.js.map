{"version":3,"file":"sofico-framework-ui-kit-components-input-single-select-text-hybrid.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-single-select-text-hybrid/input-single-select-text-hybrid.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-single-select-text-hybrid/input-single-select-text-hybrid.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-single-select-text-hybrid/sofico-framework-ui-kit-components-input-single-select-text-hybrid.ts"],"sourcesContent":["import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\nimport { SearchFnSelect, SearchOption } from '@sofico-framework/ui-kit/types';\nimport { hotSafe } from '@sofico-framework/utils';\nimport {\n  NzFilterOptionType,\n  NzSelectItemInterface,\n  NzSelectSizeType\n} from 'ng-zorro-antd/select';\nimport { Changes, takeUntilDestroy, UntilDestroy } from 'ngx-reactivetoolkit';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@UntilDestroy()\n@Component({\n  selector: 'sof-input-single-select-text-hybrid',\n  styleUrls: ['./input-single-select-text-hybrid.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"single-select\" *ngIf=\"!freeForm\">\n      <nz-select\n        #nzSelectElement\n        [@.disabled]=\"true\"\n        [formControl]=\"internalFormControl\"\n        [nzOptions]=\"formattedOptions$ | async\"\n        [nzSize]=\"size\"\n        [nzShowSearch]=\"showSearch\"\n        [nzAllowClear]=\"clearable\"\n        [nzBorderless]=\"borderless\"\n        [nzDisabled]=\"isDisabled\"\n        [nzFilterOption]=\"nzSearchFn\"\n        [nzPlaceHolder]=\"placeholder\"\n        [nzNotFoundContent]=\"tc + notFoundContent | translate\"\n        [class.is-invalid]=\"\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        \"\n        (nzBlur)=\"onTouch()\"\n      ></nz-select>\n    </div>\n    <input\n      #inputElement\n      *ngIf=\"freeForm\"\n      type=\"text\"\n      [attr.id]=\"labelForId\"\n      [formControl]=\"internalFormControl\"\n      class=\"form-control\"\n      [class.is-invalid]=\"\n        invalid ||\n        (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n      \"\n      [placeholder]=\"placeholder\"\n      (input)=\"onChange()\"\n      (blur)=\"onTouch()\"\n    />\n  `,\n  providers: [\n    {\n      provide: SOF_FOCUS_COMPONENT,\n      useExisting: InputSingleSelectTextHybridComponent\n    }\n  ]\n})\nexport class InputSingleSelectTextHybridComponent\n  implements ControlValueAccessor, OnInit, OnChanges, OnDestroy, OnSofFocus {\n  @Input() tc: string;\n\n  // Size of Select input\n  @Input() size: NzSelectSizeType = 'large';\n\n  //  Whether to show the search icon\n  @Input() showSearch = true;\n\n  // Whether the select has borderless styling\n  @Input() borderless = false;\n\n  // Specify content to show when no result matches..\n  @Input() notFoundContent = '.NOT-FOUND';\n\n  /**\n   * Switch to freeform input\n   */\n  @Input() freeForm: boolean;\n\n  /**\n   * The id of the input to connect to a label tag.\n   */\n  @Input() labelForId: string;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * The placeholder of the input.\n   */\n  @Input() placeholder = '';\n\n  /**\n   * The options that populate the list.\n   */\n  @Input() options: any[];\n\n  /**\n   * Determines which property that must be used as list label.\n   */\n  @Input() selectorLabel: (x: any) => any;\n\n  /**\n   * Determines which property that must be used as list value.\n   */\n  @Input() selectorValue: (x: any) => any;\n\n  /**\n   * Determines which property that must be used as option disable.\n   */\n  @Input() selectorDisabled: (x: any) => any;\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid = false;\n\n  /**\n   * Determines whether the input can be cleared.\n   */\n  @Input() clearable = true;\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<any>();\n\n  /**\n   * EventEmitter that will emit the full object value when changed\n   */\n  @Output() changeObjectValue = new EventEmitter<any>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  // Form control used instead in simple value, as the ng-select component has internal implementation we can't reach.\n  // By making use of a form control internally we have all the features available.\n  internalFormControl = new FormControl(null);\n  propagateChange: any;\n  propagateTouch: any;\n\n  // source streams\n  @Changes('options') options$: Observable<any[]>;\n  @Changes('isDisabled') disabled$: Observable<boolean>;\n  @Changes('freeForm') freeForm$: Observable<boolean>;\n\n  // presentation streams\n  formattedOptions$: Observable<\n    { label: string; value: any; disabled: boolean }[]\n  >;\n  @ViewChild('inputElement') inputElement: ElementRef;\n  @ViewChild('nzSelectElement', { read: ElementRef })\n  nzSelectElement: ElementRef;\n\n  // Determines how the search is done.\n  @Input()\n  searchFn: SearchFnSelect = (input: string, x: SearchOption) =>\n    x?.label?.toLowerCase().startsWith(input.toLowerCase());\n\n  nzSearchFn: NzFilterOptionType = (input: string, x: NzSelectItemInterface) =>\n    this.searchFn(input, { label: x.nzLabel as string, value: x.nzValue });\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    if (this.freeForm) {\n      this.inputElement.nativeElement.focus();\n    } else if (this.nzSelectElement) {\n      this.nzSelectElement.nativeElement\n        .getElementsByTagName('input')[0]\n        .focus();\n      this.changeDetectorRef.detectChanges();\n    }\n  }\n\n  ngOnInit(): void {\n    this.formattedOptions$ = this.options$.pipe(\n      map(options => options ?? []),\n      map(options =>\n        options.map(option => ({\n          label: this.selectorLabel(option),\n          value: this.selectorValue(option),\n          disabled: this.selectorDisabled ? this.selectorDisabled(option) : null\n        }))\n      ),\n      hotSafe()\n    );\n\n    this.disabled$.pipe(takeUntilDestroy(this)).subscribe(disabled => {\n      if (disabled) {\n        this.internalFormControl.disable({ emitEvent: false });\n      } else {\n        this.internalFormControl.enable({ emitEvent: false });\n      }\n    });\n    this.freeForm$.pipe(takeUntilDestroy(this)).subscribe(disabled => {\n      if (this.internalFormControl.value !== null) {\n        this.internalFormControl.patchValue(null);\n        this.onChange();\n      }\n    });\n\n    // the reason why we're using valueChanges instead of fn ngModelChange\n    // is because:\n    // When we want to update the single-select without that the user\n    // did something we will trigger the fn writeValue. That fn\n    // will update the form value.\n    // When we update the value we're aware of the change of the value.\n    // So sometimes we don't want that valueChanges isn't triggered.\n    // that's possible by adding { emitEvent: false } to the patchValue\n    // but when you use the fn ngModelChange he will ignore the\n    // { emitEvent: false } option. So to use that we need to\n    // listen on the valueChanges events instead.\n    this.internalFormControl.valueChanges\n      .pipe(takeUntilDestroy(this))\n      .subscribe(value => {\n        if (!this.isDisabled) {\n          if (!this.freeForm) {\n            this.sofFocus();\n          }\n          this.changeValue.emit(value);\n          const fullObject = this.options.find(\n            option => this.selectorValue(option) === value\n          );\n          this.changeObjectValue.emit(fullObject);\n\n          if (this.propagateChange) {\n            this.propagateChange(value);\n          }\n        }\n      });\n  }\n\n  ngOnChanges(): void {}\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: any): void {\n    this.internalFormControl.setValue(value ?? null, { emitEvent: false });\n  }\n\n  onChange(): void {\n    if (!this.isDisabled) {\n      this.changeValue.emit(this.internalFormControl.value);\n      const fullObject = this.options.find(\n        option => this.selectorValue(option) === this.internalFormControl.value\n      );\n      this.changeObjectValue.emit(fullObject);\n\n      if (this.propagateChange) {\n        this.propagateChange(this.internalFormControl.value);\n      }\n    }\n  }\n\n  onTouch(): void {\n    this.touch.emit();\n\n    if (!this.isDisabled && this.propagateTouch) {\n      this.propagateTouch();\n    }\n  }\n\n  setDisabledState(value: boolean): void {\n    this.isDisabled = value;\n    if (value) {\n      this.internalFormControl.disable({ emitEvent: false });\n    } else {\n      this.internalFormControl.enable({ emitEvent: false });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NzSelectModule } from 'ng-zorro-antd/select';\nimport { InputSingleSelectTextHybridComponent } from './input-single-select-text-hybrid.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, NzSelectModule, TranslateModule],\n  declarations: [InputSingleSelectTextHybridComponent],\n  exports: [InputSingleSelectTextHybridComponent]\n})\nexport class InputSingleSelectTextHybridModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}