{"version":3,"file":"sofico-framework-ui-kit-components-number-base.js","sources":["../../../../projects/sofico-framework/ui-kit/components/number-base/number-base.directive.ts","../../../../projects/sofico-framework/ui-kit/components/number-base/sofico-framework-ui-kit-components-number-base.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { isNullOrUndefined } from '@sofico-framework/utils';\n\n@Directive()\nexport class InputNumberBaseDirective implements ControlValueAccessor {\n  /**\n   * The id of the input to connect to a label tag.\n   */\n  @Input() labelForId: string;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * The placeholder of the input.\n   */\n  @Input() placeholder = '';\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * Determines if there is a max number of decimals allowed.\n   */\n  @Input() set maxFraction(value: number) {\n    this.fractionDigits = value;\n    this.regex = this.buildMaxFractionRegex(value);\n  }\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<string>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  @ViewChild('inputElement')\n  inputElement: ElementRef;\n\n  internalValue: string = null;\n  propagateChange: any;\n  propagateTouch: any;\n\n  // The default decimal places is 2\n  fractionDigits = 2;\n\n  private regex: RegExp = this.buildMaxFractionRegex(this.fractionDigits);\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(obj: any): void {\n    // convert string input to prepare it for number casting\n    const inputValueAsDecimal = this.toDecimal(obj);\n    // if conversion results in null or undefined\n    if (inputValueAsDecimal === null || inputValueAsDecimal === undefined) {\n      // block the input value\n      this.internalValue = null;\n    } else {\n      // this regex only fails when there are too many fraction digits\n      // so this will cut off the unnecessary digits\n      if (!inputValueAsDecimal.match(this.regex)) {\n        const maxFractionIndex =\n          inputValueAsDecimal.indexOf('.') + this.fractionDigits;\n        this.internalValue = inputValueAsDecimal.substr(\n          0,\n          maxFractionIndex + 1\n        );\n      } else {\n        this.internalValue = inputValueAsDecimal;\n      }\n    }\n  }\n\n  onChange(value: string): void {\n    if (!this.isDisabled) {\n      // update internal value\n      const internalValue = this.updateValueByUserInput(value);\n\n      // emit value\n      this.changeValue.emit(internalValue);\n\n      // propagate the change\n      if (this.propagateChange && internalValue !== undefined) {\n        this.propagateChange(\n          internalValue === null\n            ? null\n            : Number(internalValue.replace(/,/g, '.'))\n        );\n      }\n    }\n  }\n\n  updateValueByUserInput(value: string): string {\n    if (value !== undefined) {\n      // convert string input to prepare it for number casting\n      const inputValueAsDecimal = this.toDecimal(value);\n      // if conversion results in undefined\n      if (inputValueAsDecimal === undefined) {\n        // block the input value\n        this.blockInputValue();\n      } else {\n        // if processed value contains too many decimals, block the input value\n        if (\n          !inputValueAsDecimal?.match(this.regex) &&\n          !isNullOrUndefined(inputValueAsDecimal)\n        ) {\n          this.blockInputValue();\n          return this.internalValue;\n        }\n        // else, assign processed input value to internal value, unless not desired\n        const allowModelToDifferFromView =\n          ['-', '+', '.', ','].indexOf(value) > -1;\n        if (!allowModelToDifferFromView) {\n          this.internalValue = inputValueAsDecimal;\n        }\n        return inputValueAsDecimal;\n      }\n    }\n  }\n\n  onTouch(): void {\n    this.touch.emit();\n\n    if (!this.isDisabled && this.propagateTouch) {\n      this.propagateTouch();\n    }\n  }\n\n  setDisabledState(value: boolean): void {\n    this.isDisabled = value;\n  }\n\n  blockInputValue(): void {\n    this.inputElement.nativeElement.value = this.internalValue;\n  }\n\n  /**\n   * Converts string to undefined, null or the original input value. The purpose is to validate whether or not it has a decimal-like structure,\n   * while preparing the return value for easy castability to a number, while preserving the input its decimal locale flexibility. Returns\n   * null if it detects emptyness. Returns the input value if it could convert it to a simple decimal-like value, not accepting scientific\n   * variables (eg. Euler's number). Thus, string validation only allows a signed floating point value, with comma or point as decimal\n   * separator, without thousand separators. Returns undefined in all other cases.\n   * @param value String value of which to retrieve a decimal-like conversion\n   */\n  toDecimal(value: string): string {\n    // default it to undefined\n    let decimal: string;\n    // set it to null if naturally numerically empty\n    if (value === undefined || value === null || value === '') {\n      decimal = null;\n      // else, make it castable to number, processed using natural (not pure JavaScript) logic\n    } else {\n      const valueToString = value.toString();\n      if (valueToString === '-') {\n        decimal = '-0';\n      } else if (['+', '.', ','].indexOf(valueToString) > -1) {\n        decimal = '0';\n      } else if (\n        !Number.isNaN(Number(valueToString.replace(/,/g, '.'))) &&\n        (valueToString.match(/^[\\+\\-]?[0-9.,]+$/) || []).length\n      ) {\n        decimal = valueToString;\n      }\n    }\n    return decimal;\n  }\n\n  private buildMaxFractionRegex(value: number): RegExp {\n    return new RegExp(`^[\\\\+\\\\-]*\\\\d*[\\\\,\\\\.]?\\\\d{0,${value}}$`, 'g');\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;MAYa,wBAAwB;IADrC;;;;QAeW,gBAAW,GAAG,EAAE,CAAC;;;;QAkBhB,gBAAW,GAAG,IAAI,YAAY,EAAU,CAAC;;;;QAKzC,UAAK,GAAG,IAAI,YAAY,EAAO,CAAC;QAK1C,kBAAa,GAAW,IAAI,CAAC;;QAK7B,mBAAc,GAAG,CAAC,CAAC;QAEX,UAAK,GAAW,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KAkIzE;;;;IA3JC,IAAa,WAAW,CAAC,KAAa;QACpC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;KAChD;IAwBD,gBAAgB,CAAC,EAAO;QACtB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;KAC3B;IAED,iBAAiB,CAAC,EAAO;QACvB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;KAC1B;IAED,UAAU,CAAC,GAAQ;;QAEjB,MAAM,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;;QAEhD,IAAI,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,EAAE;;YAErE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC3B;aAAM;;;YAGL,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC1C,MAAM,gBAAgB,GACpB,mBAAmB,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;gBACzD,IAAI,CAAC,aAAa,GAAG,mBAAmB,CAAC,MAAM,CAC7C,CAAC,EACD,gBAAgB,GAAG,CAAC,CACrB,CAAC;aACH;iBAAM;gBACL,IAAI,CAAC,aAAa,GAAG,mBAAmB,CAAC;aAC1C;SACF;KACF;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;;YAEpB,MAAM,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;;YAGzD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;;YAGrC,IAAI,IAAI,CAAC,eAAe,IAAI,aAAa,KAAK,SAAS,EAAE;gBACvD,IAAI,CAAC,eAAe,CAClB,aAAa,KAAK,IAAI;sBAClB,IAAI;sBACJ,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAC7C,CAAC;aACH;SACF;KACF;IAED,sBAAsB,CAAC,KAAa;QAClC,IAAI,KAAK,KAAK,SAAS,EAAE;;YAEvB,MAAM,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;;YAElD,IAAI,mBAAmB,KAAK,SAAS,EAAE;;gBAErC,IAAI,CAAC,eAAe,EAAE,CAAC;aACxB;iBAAM;;gBAEL,IACE,EAAC,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,KAAK,CAAC,IAAI,CAAC,KAAK,EAAC;oBACvC,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,EACvC;oBACA,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,OAAO,IAAI,CAAC,aAAa,CAAC;iBAC3B;;gBAED,MAAM,0BAA0B,GAC9B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3C,IAAI,CAAC,0BAA0B,EAAE;oBAC/B,IAAI,CAAC,aAAa,GAAG,mBAAmB,CAAC;iBAC1C;gBACD,OAAO,mBAAmB,CAAC;aAC5B;SACF;KACF;IAED,OAAO;QACL,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAElB,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,cAAc,EAAE;YAC3C,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB;KACF;IAED,gBAAgB,CAAC,KAAc;QAC7B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;IAED,eAAe;QACb,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;KAC5D;;;;;;;;;IAUD,SAAS,CAAC,KAAa;;QAErB,IAAI,OAAe,CAAC;;QAEpB,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,EAAE,EAAE;YACzD,OAAO,GAAG,IAAI,CAAC;;SAEhB;aAAM;YACL,MAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;YACvC,IAAI,aAAa,KAAK,GAAG,EAAE;gBACzB,OAAO,GAAG,IAAI,CAAC;aAChB;iBAAM,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;gBACtD,OAAO,GAAG,GAAG,CAAC;aACf;iBAAM,IACL,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;gBACvD,CAAC,aAAa,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,EAAE,EAAE,MAAM,EACvD;gBACA,OAAO,GAAG,aAAa,CAAC;aACzB;SACF;QACD,OAAO,OAAO,CAAC;KAChB;IAEO,qBAAqB,CAAC,KAAa;QACzC,OAAO,IAAI,MAAM,CAAC,gCAAgC,KAAK,IAAI,EAAE,GAAG,CAAC,CAAC;KACnE;;;YAnLF,SAAS;;;yBAKP,KAAK;yBAKL,KAAK;0BAKL,KAAK;sBAKL,KAAK;0BAKL,KAAK;0BAQL,MAAM;oBAKN,MAAM;2BAEN,SAAS,SAAC,cAAc;;;ACnD3B;;;;;;"}