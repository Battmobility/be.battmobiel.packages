{"version":3,"file":"sofico-framework-ui-kit-components-input-password.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-password/input-password.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-password/input-password.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-password/sofico-framework-ui-kit-components-input-password.ts"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\n\n@Component({\n  selector: 'sof-input-password',\n  template: `\n    <div class=\"input-group\">\n      <input\n        #inputElement\n        [attr.type]=\"showPlainText ? 'text' : 'password'\"\n        [attr.id]=\"labelForId\"\n        [attr.autocomplete]=\"autocomplete\"\n        [value]=\"internalValue\"\n        class=\"form-control\"\n        [class.is-invalid]=\"\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        \"\n        [placeholder]=\"placeholder\"\n        [disabled]=\"isDisabled\"\n        (input)=\"onChange($event.target?.value)\"\n        (blur)=\"onTouch()\"\n      />\n      <div class=\"input-group-append\">\n        <button\n          class=\"btn btn-action\"\n          [class.is-invalid]=\"\n            invalid ||\n            (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n          \"\n          (click)=\"toggle()\"\n          type=\"button\"\n          [disabled]=\"isDisabled\"\n        >\n          <sof-svg-icon icon=\"icon-eye\" *ngIf=\"!showPlainText\"></sof-svg-icon>\n          <sof-svg-icon\n            icon=\"icon-eye-crossed\"\n            *ngIf=\"showPlainText\"\n          ></sof-svg-icon>\n        </button>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./input-password.component.scss'],\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputPasswordComponent }\n  ]\n})\nexport class InputPasswordComponent\n  implements ControlValueAccessor, OnDestroy, OnSofFocus {\n  showPlainText = false;\n  /**\n   * The id of the input to connect to a label tag.\n   */\n  @Input() labelForId: string;\n\n  /**\n   * Determines the value of the control.\n   */\n  @Input() set value(value: string) {\n    this.writeValue(value);\n  }\n\n  /**\n   * The placeholder of the input.\n   */\n  @Input() placeholder = '';\n\n  /**\n   * The autocomplete of the input.\n   */\n  @Input() autocomplete = '';\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<string>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  @ViewChild('inputElement') inputElement: ElementRef;\n\n  internalValue: string = null;\n  propagateChange: any;\n  propagateTouch: any;\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: string): void {\n    this.internalValue = value ?? null;\n  }\n\n  onChange(value: string): void {\n    if (!this.isDisabled) {\n      const newInternalValue = value ?? null;\n\n      // emit value\n      this.changeValue.emit(newInternalValue);\n\n      // propagate the change\n      if (this.propagateChange) {\n        this.internalValue = newInternalValue;\n        this.propagateChange(newInternalValue);\n      }\n    }\n  }\n\n  onTouch(): void {\n    this.touch.emit();\n\n    if (!this.isDisabled && this.propagateTouch) {\n      this.propagateTouch();\n    }\n  }\n\n  setDisabledState(value: boolean): void {\n    this.showPlainText = false;\n    this.isDisabled = value;\n  }\n\n  toggle(): void {\n    this.showPlainText = !this.showPlainText;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SvgIconModule } from '@sofico-framework/ui-kit/components/svg-icon';\nimport { InputPasswordComponent } from './input-password.component';\n\n@NgModule({\n  declarations: [InputPasswordComponent],\n  exports: [InputPasswordComponent],\n  imports: [CommonModule, SvgIconModule]\n})\nexport class InputPasswordModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;MA+Da,sBAAsB;IAmDjC,YACqB,IAAmB,EACX,SAAoB;QAD5B,SAAI,GAAJ,IAAI,CAAe;QACX,cAAS,GAAT,SAAS,CAAW;QAnDjD,kBAAa,GAAG,KAAK,CAAC;;;;QAgBb,gBAAW,GAAG,EAAE,CAAC;;;;QAKjB,iBAAY,GAAG,EAAE,CAAC;;;;QAejB,gBAAW,GAAG,IAAI,YAAY,EAAU,CAAC;;;;QAKzC,UAAK,GAAG,IAAI,YAAY,EAAO,CAAC;QAI1C,kBAAa,GAAW,IAAI,CAAC;QAQ3B,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;SAChC;KACF;;;;IA/CD,IAAa,KAAK,CAAC,KAAa;QAC9B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;KACxB;IA+CD,QAAQ;QACN,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACzC;IAED,WAAW;;QACT,UAAI,IAAI,CAAC,SAAS,0CAAE,aAAa,EAAE;;;;;;YAMjC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,GAAG,SAAQ,CAAC;SACpD;KACF;IAED,gBAAgB,CAAC,EAAO;QACtB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;KAC3B;IAED,iBAAiB,CAAC,EAAO;QACvB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;KAC1B;IAED,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,aAAa,GAAG,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC;KACpC;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,MAAM,gBAAgB,GAAG,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC;;YAGvC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;;YAGxC,IAAI,IAAI,CAAC,eAAe,EAAE;gBACxB,IAAI,CAAC,aAAa,GAAG,gBAAgB,CAAC;gBACtC,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;aACxC;SACF;KACF;IAED,OAAO;QACL,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAElB,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,cAAc,EAAE;YAC3C,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB;KACF;IAED,gBAAgB,CAAC,KAAc;QAC7B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;IAED,MAAM;QACJ,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;KAC1C;;;YAlKF,SAAS,SAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCT;gBAED,SAAS,EAAE;oBACT,EAAE,OAAO,EAAE,mBAAmB,EAAE,WAAW,EAAE,sBAAsB,EAAE;iBACtE;;aACF;;;YAlDQ,aAAa,uBAuGjB,QAAQ;YAxGkB,SAAS,uBAyGnC,QAAQ,YAAI,IAAI;;;yBA/ClB,KAAK;oBAKL,KAAK;0BAOL,KAAK;2BAKL,KAAK;yBAKL,KAAK;sBAKL,KAAK;0BAKL,MAAM;oBAKN,MAAM;2BAEN,SAAS,SAAC,cAAc;;;MClGd,mBAAmB;;;YAL/B,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,sBAAsB,CAAC;gBACtC,OAAO,EAAE,CAAC,sBAAsB,CAAC;gBACjC,OAAO,EAAE,CAAC,YAAY,EAAE,aAAa,CAAC;aACvC;;;ACTD;;;;;;"}