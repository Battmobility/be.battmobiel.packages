{"version":3,"file":"sofico-framework-ui-kit-components-input-time-picker.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-time-picker/input-time-picker.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-time-picker/input-time-picker.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-time-picker/sofico-framework-ui-kit-components-input-time-picker.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\nimport { TimeFormatEnum } from '@sofico-framework/utils';\nimport { Changes, takeUntilDestroy, UntilDestroy } from 'ngx-reactivetoolkit';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\n@UntilDestroy()\n@Component({\n  selector: 'sof-input-time-picker',\n  styleUrls: ['./input-time-picker.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <nz-time-picker\n      #inputElement\n      [@.disabled]=\"true\"\n      [formControl]=\"internalFormControl\"\n      [nzSize]=\"size\"\n      [nzFormat]=\"timeFormat\"\n      [nzPlaceHolder]=\"placeHolder\"\n      [nzUse12Hours]=\"use12Hours\"\n      [nzHourStep]=\"hourStep\"\n      [nzMinuteStep]=\"minuteStep\"\n      [nzSecondStep]=\"secondStep\"\n      [nzAllowEmpty]=\"allowEmpty\"\n      [nzDefaultOpenValue]=\"defaultOpenValue\"\n      [nzDisabled]=\"isDisabled\"\n      [nzDisabledHours]=\"disabledHours$ | async\"\n      [nzDisabledMinutes]=\"disabledMinutes$ | async\"\n      [nzDisabledSeconds]=\"disabledSeconds$ | async\"\n      [class.is-invalid]=\"\n        invalid ||\n        (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n      \"\n      (nzOpenChange)=\"onTouch($event)\"\n    ></nz-time-picker>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputTimePickerComponent }\n  ]\n})\nexport class InputTimePickerComponent\n  implements OnInit, OnDestroy, OnChanges, ControlValueAccessor, OnSofFocus {\n  // Size of Select input\n  @Input() size = 'large';\n\n  // TimeFormat for enum\n  @Input() timeFormat: TimeFormatEnum = TimeFormatEnum.HH_TIME_M;\n\n  // Display as 12 hours format and set TimeFormatEnum to H_TIME_M or H_TIME_M_S\n  @Input() use12Hours = false;\n\n  // Placeholder of date input\n  @Input() placeHolder: string;\n\n  // Interval between hours in time-picker-view\n  @Input() hourStep: number;\n\n  // Interval between minutes in time-picker-view\n  @Input() minuteStep: number;\n\n  // Interval between seconds in time-picker-view\n  @Input() secondStep: number;\n\n  // Allow clearing text\n  @Input() allowEmpty = true;\n\n  // Default value when you open the panel when formControl is nul\n  @Input() defaultOpenValue: Date = new Date();\n\n  /**\n   * The id of the input to connect to a label tag.\n   * currently not supported\n   */\n  @Input() labelForId: string;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid = false;\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<Date>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  /**\n   * Determines the min time of the control.\n   */\n  @Input() minTime: Date;\n\n  /**\n   * Determines the max time of the control.\n   */\n  @Input() maxTime: Date;\n\n  @Changes('minTime') minTime$: Observable<Date>;\n  @Changes('maxTime') maxTime$: Observable<Date>;\n\n  @ViewChild('inputElement', { read: ElementRef }) inputElement: ElementRef;\n\n  disabledHours$: Observable<() => number[]>;\n  disabledMinutes$: Observable<(hour: number) => number[]>;\n  disabledSeconds$: Observable<(hour: number, minute: number) => number[]>;\n\n  internalFormControl = new FormControl(null);\n  propagateChange: any;\n  propagateTouch: any;\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.getElementsByTagName('input')[0].focus();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  ngOnChanges(): void {}\n\n  ngOnInit(): void {\n    this.internalFormControl.valueChanges\n      .pipe(takeUntilDestroy(this))\n      .subscribe(value => {\n        if (!this.isDisabled) {\n          this.changeValue.emit(value);\n\n          if (this.propagateChange) {\n            this.propagateChange(value);\n          }\n        }\n      });\n\n    this.disabledHours$ = combineLatest([\n      this.minTime$.pipe(startWith(null)),\n      this.maxTime$.pipe(startWith(null))\n    ]).pipe(\n      map(([minTime, maxTime]) =>\n        this.getNgZorroDisabledHours(minTime, maxTime)\n      )\n    );\n\n    this.disabledMinutes$ = combineLatest([\n      this.minTime$.pipe(startWith(null)),\n      this.maxTime$.pipe(startWith(null))\n    ]).pipe(\n      map(([minTime, maxTime]) =>\n        this.getNgZorroDisabledMinutes(minTime, maxTime)\n      )\n    );\n\n    this.disabledSeconds$ = combineLatest([\n      this.minTime$.pipe(startWith(null)),\n      this.maxTime$.pipe(startWith(null))\n    ]).pipe(\n      map(([minTime, maxTime]) =>\n        this.getNgZorroDisabledSeconds(minTime, maxTime)\n      )\n    );\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: any): void {\n    this.internalFormControl.setValue(value, { emitEvent: false });\n  }\n\n  onTouch($event: boolean): void {\n    if (!$event) {\n      this.touch.emit();\n      if (!this.isDisabled && this.propagateTouch) {\n        this.propagateTouch();\n      }\n    }\n  }\n\n  private getNgZorroDisabledHours(\n    minTime: Date,\n    maxTime: Date\n  ): () => number[] {\n    return () =>\n      [...Array(24).keys()].reduce((acc, hour) => {\n        if (!this.hourAllowed(minTime, maxTime, hour)) {\n          acc.push(hour);\n        }\n        return acc;\n      }, []);\n  }\n\n  private getNgZorroDisabledMinutes(\n    minTime: Date,\n    maxTime: Date\n  ): (hour: number) => number[] {\n    return hour =>\n      [...Array(60).keys()].reduce((acc, minute) => {\n        if (!this.hourAllowed(minTime, maxTime, hour)) {\n          acc.push(minute);\n        } else if (!this.minuteAllowed(minTime, maxTime, hour, minute)) {\n          acc.push(minute);\n        }\n        return acc;\n      }, []);\n  }\n\n  private getNgZorroDisabledSeconds(\n    minTime: Date,\n    maxTime: Date\n  ): (hour: number, minute: number) => number[] {\n    return (hour, minute) =>\n      [...Array(60).keys()].reduce((acc, second) => {\n        if (!this.hourAllowed(minTime, maxTime, hour)) {\n          acc.push(second);\n        } else if (!this.minuteAllowed(minTime, maxTime, hour, minute)) {\n          acc.push(second);\n        } else if (\n          !this.secondAllowed(minTime, maxTime, hour, minute, second)\n        ) {\n          acc.push(second);\n        }\n        return acc;\n      }, []);\n  }\n\n  private hourAllowed(minTime: Date, maxTime: Date, hour: number): boolean {\n    if (minTime || maxTime) {\n      if (maxTime && maxTime.getHours() < hour) {\n        return false;\n      } else if (minTime && minTime.getHours() > hour) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private minuteAllowed(\n    minTime: Date,\n    maxTime: Date,\n    hour: number,\n    minute: number\n  ): boolean {\n    if (minTime || maxTime) {\n      if (\n        maxTime &&\n        maxTime.getHours() === hour &&\n        maxTime.getMinutes() < minute\n      ) {\n        return false;\n      } else if (\n        minTime &&\n        minTime.getHours() === hour &&\n        minTime.getMinutes() > minute\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private secondAllowed(\n    minTime: Date,\n    maxTime: Date,\n    hour: number,\n    minute: number,\n    second: number\n  ): boolean {\n    if (minTime || maxTime) {\n      if (\n        maxTime &&\n        maxTime.getHours() === hour &&\n        maxTime.getMinutes() === minute &&\n        maxTime.getSeconds() < second\n      ) {\n        return false;\n      } else if (\n        minTime &&\n        minTime.getHours() === hour &&\n        minTime.getMinutes() === minute &&\n        minTime.getSeconds() > second\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NzTimePickerModule } from 'ng-zorro-antd/time-picker';\nimport { InputTimePickerComponent } from './input-time-picker.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NzTimePickerModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule\n  ],\n  declarations: [InputTimePickerComponent],\n  exports: [InputTimePickerComponent]\n})\nexport class InputTimePickerModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}