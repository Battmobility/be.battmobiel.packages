{"version":3,"file":"sofico-framework-ui-kit-components-input-switch.js","sources":["../../../../projects/sofico-framework/ui-kit/components/input-switch/input-switch.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-switch/input-switch.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-switch/sofico-framework-ui-kit-components-input-switch.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\n\nlet uniqueSwitchCounter = 0;\n\n@Component({\n  selector: 'sof-input-switch',\n  styleUrls: ['./input-switch.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"custom-control custom-switch\">\n      <input\n        #inputElement\n        type=\"checkbox\"\n        [attr.id]=\"labelForId\"\n        [disabled]=\"isDisabled\"\n        class=\"custom-control-input\"\n        [class.is-invalid]=\"\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        \"\n        [checked]=\"internalValue\"\n        [attr.value]=\"internalValue\"\n        (change)=\"onToggle($event)\"\n      />\n      <label [for]=\"labelForId\" class=\"custom-control-label\">\n        {{ label }}\n      </label>\n    </div>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputSwitchComponent }\n  ]\n})\nexport class InputSwitchComponent\n  implements ControlValueAccessor, OnDestroy, OnSofFocus {\n  /**\n   * The translated label of the input.\n   */\n  @Input() label: string;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * Determines if the input is checked or not.\n   */\n  @Input() set selected(value: boolean) {\n    this.writeValue(value);\n    this.calculateIndeterminate();\n  }\n\n  /**\n   * Determines if the input is indeterminate or not.\n   * Checked true will always prevail over indeterminate true.\n   */\n  @Input() set indeterminate(value: boolean) {\n    this.isIndeterminate = value;\n    this.calculateIndeterminate();\n  }\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<boolean>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  @ViewChild('inputElement', { static: true }) inputElement: ElementRef;\n\n  internalValue: boolean = null;\n  isIndeterminate = false;\n  propagateChange: any;\n  propagateTouch: any;\n  labelForId = 'sof-input-switch-' + uniqueSwitchCounter; // generate unique id\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    ++uniqueSwitchCounter;\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: boolean): void {\n    this.internalValue = value;\n  }\n\n  onToggle(event: any): void {\n    // Prevent native functionality of browser input-checkbox\n    event.preventDefault();\n\n    if (!this.isDisabled) {\n      this.calculateIndeterminate();\n      const newValue = !this.internalValue;\n      if (this.propagateChange) {\n        this.internalValue = newValue;\n        this.propagateChange(newValue);\n      }\n      this.changeValue.emit(newValue);\n    }\n\n    // Must happen after propagateChange, if not it will not work properly when formControl has set updateOn: 'blur'.\n    // When updateOn: 'blur' is set the form control will only emit a value once the control is out of focus.\n    // By calling propagateTouch before propagateChange the old value is used as initial value instead of the new value.\n    // It seems that every propagateChange is ignored once the propagateTouch is triggered.\n    // The problem doesn't occur when updateOn is 'change' (default) as the control is not limited by propagateTouch.\n    this.onTouch();\n  }\n\n  onTouch(): void {\n    this.touch.emit();\n\n    if (!this.isDisabled && this.propagateTouch) {\n      this.propagateTouch();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  private calculateIndeterminate(): void {\n    this.inputElement.nativeElement.indeterminate =\n      this.isIndeterminate && !this.internalValue;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InputSwitchComponent } from './input-switch.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [InputSwitchComponent],\n  exports: [InputSwitchComponent]\n})\nexport class InputSwitchModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}