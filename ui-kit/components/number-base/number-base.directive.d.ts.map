{"version":3,"file":"number-base.directive.d.ts","sources":["number-base.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare class InputNumberBaseDirective implements ControlValueAccessor {\n    /**\n     * The id of the input to connect to a label tag.\n     */\n    labelForId: string;\n    /**\n     *  Determines if the input is disabled.\n     */\n    isDisabled: boolean;\n    /**\n     * The placeholder of the input.\n     */\n    placeholder: string;\n    /**\n     * Determines whether the input is in a valid state.\n     */\n    invalid: boolean;\n    /**\n     * Determines if there is a max number of decimals allowed.\n     */\n    set maxFraction(value: number);\n    /**\n     * EventEmitter that will emit the value when changed.\n     */\n    changeValue: EventEmitter<string>;\n    /**\n     * EventEmitter that will emit when control is touched.\n     */\n    touch: EventEmitter<any>;\n    inputElement: ElementRef;\n    internalValue: string;\n    propagateChange: any;\n    propagateTouch: any;\n    fractionDigits: number;\n    private regex;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    writeValue(obj: any): void;\n    onChange(value: string): void;\n    updateValueByUserInput(value: string): string;\n    onTouch(): void;\n    setDisabledState(value: boolean): void;\n    blockInputValue(): void;\n    /**\n     * Converts string to undefined, null or the original input value. The purpose is to validate whether or not it has a decimal-like structure,\n     * while preparing the return value for easy castability to a number, while preserving the input its decimal locale flexibility. Returns\n     * null if it detects emptyness. Returns the input value if it could convert it to a simple decimal-like value, not accepting scientific\n     * variables (eg. Euler's number). Thus, string validation only allows a signed floating point value, with comma or point as decimal\n     * separator, without thousand separators. Returns undefined in all other cases.\n     * @param value String value of which to retrieve a decimal-like conversion\n     */\n    toDecimal(value: string): string;\n    private buildMaxFractionRegex;\n}\n"]}