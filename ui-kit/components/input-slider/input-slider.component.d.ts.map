{"version":3,"file":"input-slider.component.d.ts","sources":["input-slider.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, NgControl } from '@angular/forms';\nimport { OnSofFocus } from '@sofico-framework/ui-kit/directives/focus';\nimport { NzMarks } from 'ng-zorro-antd/slider';\nexport declare class InputSliderComponent implements ControlValueAccessor, OnDestroy, OnSofFocus, OnInit {\n    ngControl: NgControl;\n    private changeDetectorRef;\n    private fb;\n    nzMarks: NzMarks;\n    propagateChange: any;\n    propagateTouch: any;\n    localMinValue: number;\n    localMaxValue: number;\n    localReversed: boolean;\n    localRange: boolean;\n    internalValue: any;\n    calculatedValue: any;\n    /**\n     *  Determines if the input is disabled.\n     */\n    isDisabled: boolean;\n    /**\n     *  Determines if the input will allow two boundary values to be picked.\n     */\n    set range(isRange: boolean);\n    /**\n     * Determines if the selected part of the slider is to the left\n     * or to the right of the selected value\n     * false => |=====O-----|   [default]\n     * true =>  |-----O=====|\n     */\n    set reversed(isReversed: boolean);\n    /**\n     *  Visibility of marks\n     */\n    marks: 'neither' | 'min' | 'max' | 'both';\n    /**\n     * The maximum amount of decimals allowed in the input fields\n     */\n    maxFraction: number;\n    /**\n     * Determines the value of the control.\n     */\n    set value(value: number | [number, number]);\n    /**\n     * Determines the min value of the slider.\n     */\n    set minValue(value: number);\n    /**\n     * Determines the max value of the slider.\n     */\n    set maxValue(value: number);\n    /**\n     * Determines the display format of the values.\n     */\n    set labelFormatFn(fn: (value: number) => string);\n    /**\n     * EventEmitter that will emit the value when changed.\n     */\n    changeValue: EventEmitter<number | [number, number]>;\n    /**\n     * EventEmitter that will emit the value after release.\n     */\n    valueAfterRelease: EventEmitter<number | [number, number]>;\n    inputElement: ElementRef;\n    localValueForm: import(\"@angular/forms\").FormGroup;\n    localLabelFormatFn: (value: number) => string;\n    constructor(ngControl: NgControl, changeDetectorRef: ChangeDetectorRef, fb: FormBuilder);\n    ngOnInit(): void;\n    onLoseFocus(): void;\n    sofFocus(): void;\n    ngOnDestroy(): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    writeValue(value: number | [number, number]): void;\n    onChange(value: number | [number, number], isSlider?: boolean): void;\n    onTouch(value: number | [number, number]): void;\n    setDisabledState(value: boolean): void;\n    private calculateValue;\n    private calculateReversedValue;\n    private calculateMarks;\n    private updateLocalValueForm;\n}\n"]}