{"version":3,"file":"input-switch.component.d.ts","sources":["input-switch.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport { OnSofFocus } from '@sofico-framework/ui-kit/directives/focus';\nexport declare class InputSwitchComponent implements ControlValueAccessor, OnDestroy, OnSofFocus {\n    form: FormComponent;\n    ngControl: NgControl;\n    /**\n     * The translated label of the input.\n     */\n    label: string;\n    /**\n     *  Determines if the input is disabled.\n     */\n    isDisabled: boolean;\n    /**\n     * Determines whether the input is in a valid state.\n     */\n    invalid: boolean;\n    /**\n     * Determines if the input is checked or not.\n     */\n    set selected(value: boolean);\n    /**\n     * Determines if the input is indeterminate or not.\n     * Checked true will always prevail over indeterminate true.\n     */\n    set indeterminate(value: boolean);\n    /**\n     * EventEmitter that will emit the value when changed.\n     */\n    changeValue: EventEmitter<boolean>;\n    /**\n     * EventEmitter that will emit when control is touched.\n     */\n    touch: EventEmitter<any>;\n    inputElement: ElementRef;\n    internalValue: boolean;\n    isIndeterminate: boolean;\n    propagateChange: any;\n    propagateTouch: any;\n    labelForId: string;\n    constructor(form: FormComponent, ngControl: NgControl);\n    sofFocus(): void;\n    ngOnDestroy(): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    writeValue(value: boolean): void;\n    onToggle(event: any): void;\n    onTouch(): void;\n    setDisabledState(isDisabled: boolean): void;\n    private calculateIndeterminate;\n}\n"]}