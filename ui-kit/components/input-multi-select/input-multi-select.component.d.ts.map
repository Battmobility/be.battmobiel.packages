{"version":3,"file":"input-multi-select.component.d.ts","sources":["input-multi-select.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport { OnSofFocus } from '@sofico-framework/ui-kit/directives/focus';\nimport { SearchFnSelect } from '@sofico-framework/ui-kit/types';\nimport { NzFilterOptionType, NzSelectSizeType } from 'ng-zorro-antd/select';\nimport { Observable } from 'rxjs';\nexport declare class InputMultiSelectComponent implements ControlValueAccessor, OnChanges, OnInit, OnDestroy, OnSofFocus {\n    form: FormComponent;\n    ngControl: NgControl;\n    private changeDetectorRef;\n    constructor(form: FormComponent, ngControl: NgControl, changeDetectorRef: ChangeDetectorRef);\n    tc: string;\n    size: NzSelectSizeType;\n    showSearch: boolean;\n    clearable: boolean;\n    borderless: boolean;\n    notFoundContent: string;\n    placeholder: string;\n    tokenSeparators: string[];\n    maxMultipleCount: number;\n    maxTagCount: number;\n    /**\n     * The id of the input to connect to a label tag.\n     * currently not supported\n     */\n    labelForId: string;\n    /**\n     *  Determines if the input is disabled.\n     */\n    isDisabled: boolean;\n    /**\n     * The options that populate the list.\n     */\n    options: any[];\n    /**\n     * Determines which property that must be used as list label.\n     */\n    selectorLabel: (x: any) => any;\n    /**\n     * Determines which property that must be used as list value.\n     */\n    selectorValue: (x: any) => any;\n    /**\n     * Determines which property that must be used as option disable.\n     */\n    selectorDisabled: (x: any) => any;\n    /**\n     * Determines whether the input is in a valid state.\n     */\n    invalid: boolean;\n    /**\n     * EventEmitter that will emit the value when changed.\n     */\n    changeValue: EventEmitter<any>;\n    internalFormControl: FormControl;\n    propagateChange: any;\n    propagateTouch: any;\n    options$: Observable<any[]>;\n    formattedOptions$: Observable<{\n        label: string;\n        value: any;\n        disabled: boolean;\n    }[]>;\n    inputElement: ElementRef;\n    searchFn: SearchFnSelect;\n    nzSearchFn: NzFilterOptionType;\n    sofFocus(): void;\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    writeValue(value: any): void;\n    onTouch(): void;\n    setDisabledState(value: boolean): void;\n}\n"]}