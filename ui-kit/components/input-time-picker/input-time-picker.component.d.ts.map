{"version":3,"file":"input-time-picker.component.d.ts","sources":["input-time-picker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport { OnSofFocus } from '@sofico-framework/ui-kit/directives/focus';\nimport { TimeFormatEnum } from '@sofico-framework/utils';\nimport { Observable } from 'rxjs';\nexport declare class InputTimePickerComponent implements OnInit, OnDestroy, OnChanges, ControlValueAccessor, OnSofFocus {\n    form: FormComponent;\n    ngControl: NgControl;\n    private changeDetectorRef;\n    size: string;\n    timeFormat: TimeFormatEnum;\n    use12Hours: boolean;\n    placeHolder: string;\n    hourStep: number;\n    minuteStep: number;\n    secondStep: number;\n    allowEmpty: boolean;\n    defaultOpenValue: Date;\n    /**\n     * The id of the input to connect to a label tag.\n     * currently not supported\n     */\n    labelForId: string;\n    /**\n     *  Determines if the input is disabled.\n     */\n    isDisabled: boolean;\n    /**\n     * Determines whether the input is in a valid state.\n     */\n    invalid: boolean;\n    /**\n     * EventEmitter that will emit the value when changed.\n     */\n    changeValue: EventEmitter<Date>;\n    /**\n     * EventEmitter that will emit when control is touched.\n     */\n    touch: EventEmitter<any>;\n    /**\n     * Determines the min time of the control.\n     */\n    minTime: Date;\n    /**\n     * Determines the max time of the control.\n     */\n    maxTime: Date;\n    minTime$: Observable<Date>;\n    maxTime$: Observable<Date>;\n    inputElement: ElementRef;\n    disabledHours$: Observable<() => number[]>;\n    disabledMinutes$: Observable<(hour: number) => number[]>;\n    disabledSeconds$: Observable<(hour: number, minute: number) => number[]>;\n    internalFormControl: FormControl;\n    propagateChange: any;\n    propagateTouch: any;\n    constructor(form: FormComponent, ngControl: NgControl, changeDetectorRef: ChangeDetectorRef);\n    sofFocus(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(): void;\n    ngOnInit(): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    writeValue(value: any): void;\n    onTouch($event: boolean): void;\n    private getNgZorroDisabledHours;\n    private getNgZorroDisabledMinutes;\n    private getNgZorroDisabledSeconds;\n    private hourAllowed;\n    private minuteAllowed;\n    private secondAllowed;\n}\n"]}