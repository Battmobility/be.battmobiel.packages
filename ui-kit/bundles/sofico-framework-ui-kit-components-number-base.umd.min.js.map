{"version":3,"sources":["../../../../projects/sofico-framework/ui-kit/components/number-base/number-base.directive.ts"],"names":["InputNumberBaseDirective","this","placeholder","changeValue","EventEmitter","touch","internalValue","fractionDigits","regex","buildMaxFractionRegex","Object","defineProperty","prototype","value","registerOnChange","fn","propagateChange","registerOnTouched","propagateTouch","writeValue","obj","inputValueAsDecimal","toDecimal","match","maxFractionIndex","indexOf","substr","onChange","isDisabled","updateValueByUserInput","emit","undefined","Number","replace","isNullOrUndefined","blockInputValue","onTouch","setDisabledState","inputElement","nativeElement","decimal","valueToString","toString","isNaN","length","RegExp","Directive","Input","Output","ViewChild","args"],"mappings":"8qBAWA,SAAAA,IAeWC,KAAAC,YAAc,GAkBbD,KAAAE,YAAc,IAAIC,EAAAA,aAKlBH,KAAAI,MAAQ,IAAID,EAAAA,aAKtBH,KAAAK,cAAwB,KAKxBL,KAAAM,eAAiB,EAETN,KAAAO,MAAgBP,KAAKQ,sBAAsBR,KAAKM,uBAzBxDG,OAAAC,eAAaX,EAAAY,UAAA,cAAW,KAAxB,SAAyBC,GACvBZ,KAAKM,eAAiBM,EACtBZ,KAAKO,MAAQP,KAAKQ,sBAAsBI,oCAyB1Cb,EAAAY,UAAAE,iBAAA,SAAiBC,GACfd,KAAKe,gBAAkBD,GAGzBf,EAAAY,UAAAK,kBAAA,SAAkBF,GAChBd,KAAKiB,eAAiBH,GAGxBf,EAAAY,UAAAO,WAAA,SAAWC,GAET,IAAMC,EAAsBpB,KAAKqB,UAAUF,GAE3C,GAAIC,MAAAA,EAEFpB,KAAKK,cAAgB,UAIrB,GAAKe,EAAoBE,MAAMtB,KAAKO,OAQlCP,KAAKK,cAAgBe,MARqB,CAC1C,IAAMG,EACJH,EAAoBI,QAAQ,KAAOxB,KAAKM,eAC1CN,KAAKK,cAAgBe,EAAoBK,OACvC,EACAF,EAAmB,KAQ3BxB,EAAAY,UAAAe,SAAA,SAASd,GACP,IAAKZ,KAAK2B,WAAY,CAEpB,IAAMtB,EAAgBL,KAAK4B,uBAAuBhB,GAGlDZ,KAAKE,YAAY2B,KAAKxB,GAGlBL,KAAKe,sBAAqCe,IAAlBzB,GAC1BL,KAAKe,gBACe,OAAlBV,EACI,KACA0B,OAAO1B,EAAc2B,QAAQ,KAAM,SAM/CjC,EAAAY,UAAAiB,uBAAA,SAAuBhB,GACrB,QAAckB,IAAVlB,EAAqB,CAEvB,IAAMQ,EAAsBpB,KAAKqB,UAAUT,GAE3C,QAA4BkB,IAAxBV,EAKF,OACGA,MAAAA,OAAmB,EAAnBA,EAAqBE,MAAMtB,KAAKO,SAChC0B,EAAAA,kBAAkBb,IAOnB,CAAC,IAAK,IAAK,IAAK,KAAKI,QAAQZ,IAAU,IAEvCZ,KAAKK,cAAgBe,GAEhBA,IATLpB,KAAKkC,kBACElC,KAAKK,eARdL,KAAKkC,oBAqBXnC,EAAAY,UAAAwB,QAAA,WACEnC,KAAKI,MAAMyB,QAEN7B,KAAK2B,YAAc3B,KAAKiB,gBAC3BjB,KAAKiB,kBAITlB,EAAAY,UAAAyB,iBAAA,SAAiBxB,GACfZ,KAAK2B,WAAaf,GAGpBb,EAAAY,UAAAuB,gBAAA,WACElC,KAAKqC,aAAaC,cAAc1B,MAAQZ,KAAKK,eAW/CN,EAAAY,UAAAU,UAAA,SAAUT,GAER,IAAI2B,EAEJ,GAAI3B,MAAAA,GAAmD,KAAVA,EAC3C2B,EAAU,SAEL,CACL,IAAMC,EAAgB5B,EAAM6B,WACN,MAAlBD,EACFD,EAAU,KACD,CAAC,IAAK,IAAK,KAAKf,QAAQgB,IAAkB,EACnDD,EAAU,KAETR,OAAOW,MAAMX,OAAOS,EAAcR,QAAQ,KAAM,SAChDQ,EAAclB,MAAM,sBAAwB,IAAIqB,SAEjDJ,EAAUC,GAGd,OAAOD,GAGDxC,EAAAY,UAAAH,sBAAA,SAAsBI,GAC5B,OAAO,IAAIgC,OAAO,gCAAgChC,EAAK,KAAM,+BAlLhEiC,EAAAA,gDAKEC,EAAAA,0BAKAA,EAAAA,2BAKAA,EAAAA,uBAKAA,EAAAA,2BAKAA,EAAAA,2BAQAC,EAAAA,sBAKAA,EAAAA,6BAEAC,EAAAA,UAASC,KAAA,CAAC","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { isNullOrUndefined } from '@sofico-framework/utils';\n\n@Directive()\nexport class InputNumberBaseDirective implements ControlValueAccessor {\n  /**\n   * The id of the input to connect to a label tag.\n   */\n  @Input() labelForId: string;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * The placeholder of the input.\n   */\n  @Input() placeholder = '';\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * Determines if there is a max number of decimals allowed.\n   */\n  @Input() set maxFraction(value: number) {\n    this.fractionDigits = value;\n    this.regex = this.buildMaxFractionRegex(value);\n  }\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<string>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  @ViewChild('inputElement')\n  inputElement: ElementRef;\n\n  internalValue: string = null;\n  propagateChange: any;\n  propagateTouch: any;\n\n  // The default decimal places is 2\n  fractionDigits = 2;\n\n  private regex: RegExp = this.buildMaxFractionRegex(this.fractionDigits);\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(obj: any): void {\n    // convert string input to prepare it for number casting\n    const inputValueAsDecimal = this.toDecimal(obj);\n    // if conversion results in null or undefined\n    if (inputValueAsDecimal === null || inputValueAsDecimal === undefined) {\n      // block the input value\n      this.internalValue = null;\n    } else {\n      // this regex only fails when there are too many fraction digits\n      // so this will cut off the unnecessary digits\n      if (!inputValueAsDecimal.match(this.regex)) {\n        const maxFractionIndex =\n          inputValueAsDecimal.indexOf('.') + this.fractionDigits;\n        this.internalValue = inputValueAsDecimal.substr(\n          0,\n          maxFractionIndex + 1\n        );\n      } else {\n        this.internalValue = inputValueAsDecimal;\n      }\n    }\n  }\n\n  onChange(value: string): void {\n    if (!this.isDisabled) {\n      // update internal value\n      const internalValue = this.updateValueByUserInput(value);\n\n      // emit value\n      this.changeValue.emit(internalValue);\n\n      // propagate the change\n      if (this.propagateChange && internalValue !== undefined) {\n        this.propagateChange(\n          internalValue === null\n            ? null\n            : Number(internalValue.replace(/,/g, '.'))\n        );\n      }\n    }\n  }\n\n  updateValueByUserInput(value: string): string {\n    if (value !== undefined) {\n      // convert string input to prepare it for number casting\n      const inputValueAsDecimal = this.toDecimal(value);\n      // if conversion results in undefined\n      if (inputValueAsDecimal === undefined) {\n        // block the input value\n        this.blockInputValue();\n      } else {\n        // if processed value contains too many decimals, block the input value\n        if (\n          !inputValueAsDecimal?.match(this.regex) &&\n          !isNullOrUndefined(inputValueAsDecimal)\n        ) {\n          this.blockInputValue();\n          return this.internalValue;\n        }\n        // else, assign processed input value to internal value, unless not desired\n        const allowModelToDifferFromView =\n          ['-', '+', '.', ','].indexOf(value) > -1;\n        if (!allowModelToDifferFromView) {\n          this.internalValue = inputValueAsDecimal;\n        }\n        return inputValueAsDecimal;\n      }\n    }\n  }\n\n  onTouch(): void {\n    this.touch.emit();\n\n    if (!this.isDisabled && this.propagateTouch) {\n      this.propagateTouch();\n    }\n  }\n\n  setDisabledState(value: boolean): void {\n    this.isDisabled = value;\n  }\n\n  blockInputValue(): void {\n    this.inputElement.nativeElement.value = this.internalValue;\n  }\n\n  /**\n   * Converts string to undefined, null or the original input value. The purpose is to validate whether or not it has a decimal-like structure,\n   * while preparing the return value for easy castability to a number, while preserving the input its decimal locale flexibility. Returns\n   * null if it detects emptyness. Returns the input value if it could convert it to a simple decimal-like value, not accepting scientific\n   * variables (eg. Euler's number). Thus, string validation only allows a signed floating point value, with comma or point as decimal\n   * separator, without thousand separators. Returns undefined in all other cases.\n   * @param value String value of which to retrieve a decimal-like conversion\n   */\n  toDecimal(value: string): string {\n    // default it to undefined\n    let decimal: string;\n    // set it to null if naturally numerically empty\n    if (value === undefined || value === null || value === '') {\n      decimal = null;\n      // else, make it castable to number, processed using natural (not pure JavaScript) logic\n    } else {\n      const valueToString = value.toString();\n      if (valueToString === '-') {\n        decimal = '-0';\n      } else if (['+', '.', ','].indexOf(valueToString) > -1) {\n        decimal = '0';\n      } else if (\n        !Number.isNaN(Number(valueToString.replace(/,/g, '.'))) &&\n        (valueToString.match(/^[\\+\\-]?[0-9.,]+$/) || []).length\n      ) {\n        decimal = valueToString;\n      }\n    }\n    return decimal;\n  }\n\n  private buildMaxFractionRegex(value: number): RegExp {\n    return new RegExp(`^[\\\\+\\\\-]*\\\\d*[\\\\,\\\\.]?\\\\d{0,${value}}$`, 'g');\n  }\n}\n"]}