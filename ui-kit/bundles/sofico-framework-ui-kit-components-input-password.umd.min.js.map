{"version":3,"sources":["../../../../projects/sofico-framework/ui-kit/components/input-password/input-password.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-password/input-password.module.ts"],"names":["InputPasswordComponent","form","ngControl","this","showPlainText","placeholder","autocomplete","changeValue","EventEmitter","touch","internalValue","valueAccessor","Object","defineProperty","prototype","value","writeValue","sofFocus","inputElement","nativeElement","focus","ngOnDestroy","_a","registerOnChange","fn","propagateChange","registerOnTouched","propagateTouch","onChange","isDisabled","newInternalValue","emit","onTouch","setDisabledState","toggle","Component","args","selector","template","providers","provide","SOF_FOCUS_COMPONENT","useExisting","FormComponent","decorators","type","Optional","NgControl","Host","Input","Output","ViewChild","NgModule","declarations","exports","imports","CommonModule","SvgIconModule"],"mappings":"qqCAkHE,SAAAA,EACqBC,EACQC,GADRC,KAAAF,KAAAA,EACQE,KAAAD,UAAAA,EAnD7BC,KAAAC,eAAgB,EAgBPD,KAAAE,YAAc,GAKdF,KAAAG,aAAe,GAedH,KAAAI,YAAc,IAAIC,EAAAA,aAKlBL,KAAAM,MAAQ,IAAID,EAAAA,aAItBL,KAAAO,cAAwB,KAQlBR,IACFA,EAAUS,cAAgBR,aA7C9BS,OAAAC,eAAab,EAAAc,UAAA,QAAK,KAAlB,SAAmBC,GACjBZ,KAAKa,WAAWD,oCAgDlBf,EAAAc,UAAAG,SAAA,WACEd,KAAKe,aAAaC,cAAcC,SAGlCpB,EAAAc,UAAAO,YAAA,kBACoB,QAAlBC,EAAInB,KAAKD,iBAAS,IAAAoB,OAAA,EAAAA,EAAEX,iBAMlBR,KAAKD,UAAUS,cAAcK,WAAa,eAI9ChB,EAAAc,UAAAS,iBAAA,SAAiBC,GACfrB,KAAKsB,gBAAkBD,GAGzBxB,EAAAc,UAAAY,kBAAA,SAAkBF,GAChBrB,KAAKwB,eAAiBH,GAGxBxB,EAAAc,UAAAE,WAAA,SAAWD,GACTZ,KAAKO,cAAgBK,MAAAA,EAAAA,EAAS,MAGhCf,EAAAc,UAAAc,SAAA,SAASb,GACP,IAAKZ,KAAK0B,WAAY,CACpB,IAAMC,EAAmBf,MAAAA,EAAAA,EAAS,KAGlCZ,KAAKI,YAAYwB,KAAKD,GAGlB3B,KAAKsB,kBACPtB,KAAKO,cAAgBoB,EACrB3B,KAAKsB,gBAAgBK,MAK3B9B,EAAAc,UAAAkB,QAAA,WACE7B,KAAKM,MAAMsB,QAEN5B,KAAK0B,YAAc1B,KAAKwB,gBAC3BxB,KAAKwB,kBAIT3B,EAAAc,UAAAmB,iBAAA,SAAiBlB,GACfZ,KAAKC,eAAgB,EACrBD,KAAK0B,WAAad,GAGpBf,EAAAc,UAAAoB,OAAA,WACE/B,KAAKC,eAAiBD,KAAKC,wCAjK9B+B,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,qBACVC,SAAU,yoCAuCVC,UAAW,CACT,CAAEC,QAASC,EAAAA,oBAAqBC,YAAa1C,qxBAhDxC2C,EAAAA,cAAaC,WAAA,CAAA,CAAAC,KAuGjBC,EAAAA,kBAxG0BC,EAAAA,UAASH,WAAA,CAAA,CAAAC,KAyGnCC,EAAAA,UAAQ,CAAAD,KAAIG,EAAAA,8CA/CdC,EAAAA,qBAKAA,EAAAA,2BAOAA,EAAAA,4BAKAA,EAAAA,0BAKAA,EAAAA,uBAKAA,EAAAA,2BAKAC,EAAAA,sBAKAA,EAAAA,6BAEAC,EAAAA,UAASf,KAAA,CAAC,yBClGb,iCALCgB,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,aAAc,CAACrD,GACfsD,QAAS,CAACtD,GACVuD,QAAS,CAACC,EAAAA,aAAcC,EAAAA","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\n\n@Component({\n  selector: 'sof-input-password',\n  template: `\n    <div class=\"input-group\">\n      <input\n        #inputElement\n        [attr.type]=\"showPlainText ? 'text' : 'password'\"\n        [attr.id]=\"labelForId\"\n        [attr.autocomplete]=\"autocomplete\"\n        [value]=\"internalValue\"\n        class=\"form-control\"\n        [class.is-invalid]=\"\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        \"\n        [placeholder]=\"placeholder\"\n        [disabled]=\"isDisabled\"\n        (input)=\"onChange($event.target?.value)\"\n        (blur)=\"onTouch()\"\n      />\n      <div class=\"input-group-append\">\n        <button\n          class=\"btn btn-action\"\n          [class.is-invalid]=\"\n            invalid ||\n            (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n          \"\n          (click)=\"toggle()\"\n          type=\"button\"\n          [disabled]=\"isDisabled\"\n        >\n          <sof-svg-icon icon=\"icon-eye\" *ngIf=\"!showPlainText\"></sof-svg-icon>\n          <sof-svg-icon\n            icon=\"icon-eye-crossed\"\n            *ngIf=\"showPlainText\"\n          ></sof-svg-icon>\n        </button>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./input-password.component.scss'],\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputPasswordComponent }\n  ]\n})\nexport class InputPasswordComponent\n  implements ControlValueAccessor, OnDestroy, OnSofFocus {\n  showPlainText = false;\n  /**\n   * The id of the input to connect to a label tag.\n   */\n  @Input() labelForId: string;\n\n  /**\n   * Determines the value of the control.\n   */\n  @Input() set value(value: string) {\n    this.writeValue(value);\n  }\n\n  /**\n   * The placeholder of the input.\n   */\n  @Input() placeholder = '';\n\n  /**\n   * The autocomplete of the input.\n   */\n  @Input() autocomplete = '';\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<string>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  @ViewChild('inputElement') inputElement: ElementRef;\n\n  internalValue: string = null;\n  propagateChange: any;\n  propagateTouch: any;\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: string): void {\n    this.internalValue = value ?? null;\n  }\n\n  onChange(value: string): void {\n    if (!this.isDisabled) {\n      const newInternalValue = value ?? null;\n\n      // emit value\n      this.changeValue.emit(newInternalValue);\n\n      // propagate the change\n      if (this.propagateChange) {\n        this.internalValue = newInternalValue;\n        this.propagateChange(newInternalValue);\n      }\n    }\n  }\n\n  onTouch(): void {\n    this.touch.emit();\n\n    if (!this.isDisabled && this.propagateTouch) {\n      this.propagateTouch();\n    }\n  }\n\n  setDisabledState(value: boolean): void {\n    this.showPlainText = false;\n    this.isDisabled = value;\n  }\n\n  toggle(): void {\n    this.showPlainText = !this.showPlainText;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SvgIconModule } from '@sofico-framework/ui-kit/components/svg-icon';\nimport { InputPasswordComponent } from './input-password.component';\n\n@NgModule({\n  declarations: [InputPasswordComponent],\n  exports: [InputPasswordComponent],\n  imports: [CommonModule, SvgIconModule]\n})\nexport class InputPasswordModule {}\n"]}