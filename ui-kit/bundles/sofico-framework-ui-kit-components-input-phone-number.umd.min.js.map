{"version":3,"sources":["../../../../projects/sofico-framework/ui-kit/components/input-phone-number/utils/phone-numbers.utils.ts","../../../../projects/sofico-framework/ui-kit/components/input-phone-number/input-phone-number.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-phone-number/input-phone-number.module.ts","../../../../projects/sofico-framework/ui-kit/components/input-phone-number/validators/phone-number.validator.ts"],"names":["phoneUtil","PhoneNumberUtil","getInstance","calculatePhoneNumber","countryCodeISO2","localCode","parseAndKeepRawInput","e","InputPhoneNumberComponent","form","ngControl","this","placeholder","changeValue","EventEmitter","phoneNumber","singleSelectFormControl","FormControl","internalValue","selectorLabel","x","countryPhoneCode","countryCodeISO3","selectorValue","valueAccessor","Object","defineProperty","prototype","value","setDisabledState","writeValue","sofFocus","inputElement","nativeElement","focus","ngOnDestroy","_a","registerOnChange","fn","propagateChange","registerOnTouched","propagateTouch","_b","setValue","isDisabled","internalDisabled","disable","enable","onChangeCountryCode","emitAndPropagate","onChangeLocalCode","onTouch","propagate","formatPhoneNumber","assign","format","PhoneNumberFormat","NATIONAL","tmpCountryCodeISO2","tmpLocalCode","nationalPhoneNumber","_c","getNationalNumber","toString","checkForNullValues","emit","Component","args","selector","encapsulation","ViewEncapsulation","None","template","providers","provide","SOF_FOCUS_COMPONENT","useExisting","FormComponent","decorators","type","Optional","NgControl","Host","Input","Output","ViewChild","NgModule","imports","CommonModule","InputSingleSelectModule","ReactiveFormsModule","declarations","exports","control","isValidNumberForRegion","_d"],"mappings":"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","sourcesContent":["import { PhoneNumber, PhoneNumberUtil } from 'google-libphonenumber';\n\nconst phoneUtil: PhoneNumberUtil = PhoneNumberUtil.getInstance();\n\nexport function calculatePhoneNumber(\n  countryCodeISO2: string,\n  localCode: string\n): PhoneNumber {\n  if (countryCodeISO2 && localCode) {\n    try {\n      // can throw an Error, therefore it's inside a try-catch\n      return phoneUtil.parseAndKeepRawInput(localCode, countryCodeISO2);\n    } catch (e) {}\n  }\n\n  return null;\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\nimport {\n  PhoneNumber,\n  PhoneNumberFormat,\n  PhoneNumberUtil\n} from 'google-libphonenumber';\nimport { Country } from './types/country.type';\nimport { InputPhoneNumber } from './types/input-phone-number.type';\nimport { calculatePhoneNumber } from './utils/phone-numbers.utils';\n\n@Component({\n  selector: 'sof-input-phone-number',\n  styleUrls: ['./input-phone-number.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"input-group\">\n      <div class=\"input-group-prepend\">\n        <sof-input-single-select\n          [tc]=\"tc\"\n          [formControl]=\"singleSelectFormControl\"\n          [labelForId]=\"labelForId\"\n          [options]=\"countries\"\n          [selectorLabel]=\"selectorLabel\"\n          [selectorValue]=\"selectorValue\"\n          [clearable]=\"false\"\n          [isDisabled]=\"internalDisabled\"\n          [invalid]=\"\n            invalid ||\n            (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n          \"\n          (touch)=\"onTouch(false)\"\n          (changeValue)=\"onChangeCountryCode($event)\"\n        ></sof-input-single-select>\n      </div>\n      <input\n        #inputElement\n        type=\"text\"\n        class=\"form-control\"\n        [class.is-invalid]=\"\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        \"\n        [attr.disabled]=\"internalDisabled\"\n        [placeholder]=\"placeholder\"\n        [value]=\"internalValue.localCode\"\n        (blur)=\"onTouch()\"\n        (input)=\"onChangeLocalCode($event.target?.value)\"\n      />\n    </div>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputPhoneNumberComponent }\n  ]\n})\nexport class InputPhoneNumberComponent\n  implements ControlValueAccessor, OnDestroy, OnSofFocus {\n  @Input() tc: string;\n\n  /**\n   * The id of the input to connect to a label tag.\n   */\n  @Input() labelForId: string;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() set isDisabled(value: boolean) {\n    this.setDisabledState(value);\n  }\n\n  /**\n   * The placeholder of the input.\n   */\n  @Input() placeholder = '';\n\n  /**\n   * The countries that populate the list.\n   */\n  @Input() countries: Country[];\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * Determines the value of the control.\n   */\n  @Input() set value(value: InputPhoneNumber) {\n    this.writeValue(value);\n  }\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<InputPhoneNumber>();\n\n  @ViewChild('inputElement') inputElement: ElementRef;\n\n  private phoneUtil: PhoneNumberUtil = PhoneNumberUtil.getInstance();\n  private phoneNumber: PhoneNumber = null; // store the calculated phone number\n\n  singleSelectFormControl: FormControl = new FormControl(null); // used to be able to set default value\n  internalValue: InputPhoneNumber = {\n    countryCodeISO2: null,\n    localCode: null\n  };\n  internalDisabled: boolean;\n  propagateChange: any;\n  propagateTouch: any;\n\n  selectorLabel = (x: Country) =>\n    `+${x.countryPhoneCode} (${x.countryCodeISO3})`;\n  selectorValue = (x: Country) => x.countryCodeISO2;\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: InputPhoneNumber): void {\n    this.internalValue = {\n      countryCodeISO2: value?.countryCodeISO2 ?? null,\n      localCode: value?.localCode ?? null\n    };\n\n    // set the default value of the single select control\n    this.singleSelectFormControl.setValue(this.internalValue.countryCodeISO2);\n\n    this.phoneNumber = calculatePhoneNumber(\n      this.internalValue.countryCodeISO2,\n      this.internalValue.localCode\n    );\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.internalDisabled = isDisabled;\n\n    if (isDisabled) {\n      this.singleSelectFormControl.disable();\n    } else {\n      this.singleSelectFormControl.enable();\n    }\n  }\n\n  onChangeCountryCode(countryCodeISO2: string): void {\n    if (!this.isDisabled) {\n      this.phoneNumber = calculatePhoneNumber(\n        countryCodeISO2,\n        this.internalValue.localCode\n      );\n\n      this.emitAndPropagate(countryCodeISO2, this.internalValue.localCode);\n    }\n  }\n\n  onChangeLocalCode(localCode: string): void {\n    if (!this.isDisabled) {\n      this.phoneNumber = calculatePhoneNumber(\n        this.internalValue.countryCodeISO2,\n        localCode\n      );\n\n      this.emitAndPropagate(this.internalValue.countryCodeISO2, localCode);\n    }\n  }\n\n  onTouch(propagate: boolean = true): void {\n    if (this.phoneNumber) {\n      this.internalValue = this.formatPhoneNumber(\n        this.internalValue,\n        this.phoneNumber\n      );\n    }\n\n    if (!this.isDisabled && this.propagateTouch && propagate) {\n      this.propagateTouch();\n    }\n  }\n\n  /**\n   * format phone number, in control, in a more readable style (ex. 0475201414 => 0475 20 14 14)\n   */\n  private formatPhoneNumber(\n    value: InputPhoneNumber,\n    phoneNumber: PhoneNumber\n  ): InputPhoneNumber {\n    return {\n      ...value,\n      localCode: this.phoneUtil.format(phoneNumber, PhoneNumberFormat.NATIONAL)\n    };\n  }\n\n  private emitAndPropagate(countryCodeISO2: string, localCode: string): void {\n    const tmpCountryCodeISO2 = countryCodeISO2 ?? null;\n    const tmpLocalCode = localCode ?? null;\n    // number without country prefix and/or 0-prefix (ex. +320475201414 => 475201414)\n    // phone number is equal to null when 1 character is inside the control, so first default to localCode before we accept null as a value\n    const nationalPhoneNumber =\n      this.phoneNumber?.getNationalNumber()?.toString() ?? tmpLocalCode;\n\n    const checkForNullValues =\n      tmpLocalCode === null ||\n      tmpLocalCode === '' ||\n      tmpCountryCodeISO2 === null;\n\n    if (checkForNullValues) {\n      this.changeValue.emit(null);\n    } else {\n      this.changeValue.emit({\n        countryCodeISO2: tmpCountryCodeISO2,\n        localCode: nationalPhoneNumber\n      });\n    }\n\n    if (this.propagateChange) {\n      // only set internal value when in context of a reactive form, not when used standalone\n      this.internalValue = {\n        countryCodeISO2: tmpCountryCodeISO2,\n        localCode: tmpLocalCode\n      };\n      // emit new form value with corrected localCode\n      if (checkForNullValues) {\n        this.propagateChange(null);\n      } else {\n        this.propagateChange({\n          ...this.internalValue,\n          localCode: nationalPhoneNumber\n        });\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { InputSingleSelectModule } from '@sofico-framework/ui-kit/components/input-single-select';\nimport { InputPhoneNumberComponent } from './input-phone-number.component';\n\n@NgModule({\n  imports: [CommonModule, InputSingleSelectModule, ReactiveFormsModule],\n  declarations: [InputPhoneNumberComponent],\n  exports: [InputPhoneNumberComponent]\n})\nexport class InputPhoneNumberModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { PhoneNumberUtil } from 'google-libphonenumber';\nimport { calculatePhoneNumber } from '../utils/phone-numbers.utils';\n\nconst phoneUtil: PhoneNumberUtil = PhoneNumberUtil.getInstance();\n\nexport function phoneNumberValidator(\n  control: AbstractControl\n): ValidationErrors | null {\n  if (!control?.value?.localCode) {\n    return null;\n  }\n  const phoneNumber = calculatePhoneNumber(\n    control?.value?.countryCodeISO2,\n    control?.value?.localCode\n  );\n  if (\n    phoneNumber &&\n    phoneUtil.isValidNumberForRegion(\n      phoneNumber,\n      control.value?.countryCodeISO2\n    )\n  ) {\n    return null;\n  }\n\n  return {\n    phoneNumber: true\n  };\n}\n"]}