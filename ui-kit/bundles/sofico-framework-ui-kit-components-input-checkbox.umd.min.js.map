{"version":3,"sources":["../../../../projects/sofico-framework/ui-kit/components/input-checkbox/input-checkbox.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-checkbox/input-checkbox.module.ts"],"names":["uniqueCheckboxCounter","InputCheckboxComponent","form","ngControl","this","changeValue","EventEmitter","touch","internalValue","isIndeterminate","labelForId","valueAccessor","Object","defineProperty","prototype","value","writeValue","calculateIndeterminate","sofFocus","inputElement","nativeElement","focus","ngOnDestroy","_a","registerOnChange","fn","propagateChange","registerOnTouched","propagateTouch","onToggle","event","preventDefault","isDisabled","newValue","emit","onTouch","setDisabledState","indeterminate","Component","args","selector","template","providers","provide","SOF_FOCUS_COMPONENT","useExisting","FormComponent","decorators","type","Optional","NgControl","Host","Input","Output","ViewChild","static","NgModule","imports","CommonModule","declarations","exports"],"mappings":"o/BAkBA,IAAIA,EAAwB,eAoF1B,SAAAC,EACqBC,EACQC,GADRC,KAAAF,KAAAA,EACQE,KAAAD,UAAAA,EAjBnBC,KAAAC,YAAc,IAAIC,EAAAA,aAKlBF,KAAAG,MAAQ,IAAID,EAAAA,aAItBF,KAAAI,cAAyB,KACzBJ,KAAAK,iBAAkB,EAGlBL,KAAAM,WAAa,sBAAwBV,IAMjCA,EACEG,IACFA,EAAUQ,cAAgBP,aAtC9BQ,OAAAC,eAAaZ,EAAAa,UAAA,WAAQ,KAArB,SAAsBC,GACpBX,KAAKY,WAAWD,GAChBX,KAAKa,0DAOPL,OAAAC,eAAaZ,EAAAa,UAAA,gBAAa,KAA1B,SAA2BC,GACzBX,KAAKK,gBAAkBM,EACvBX,KAAKa,0DA+BPhB,EAAAa,UAAAI,SAAA,WACEd,KAAKe,aAAaC,cAAcC,SAGlCpB,EAAAa,UAAAQ,YAAA,kBACoB,QAAlBC,EAAInB,KAAKD,iBAAS,IAAAoB,OAAA,EAAAA,EAAEZ,iBAMlBP,KAAKD,UAAUQ,cAAcK,WAAa,eAI9Cf,EAAAa,UAAAU,iBAAA,SAAiBC,GACfrB,KAAKsB,gBAAkBD,GAGzBxB,EAAAa,UAAAa,kBAAA,SAAkBF,GAChBrB,KAAKwB,eAAiBH,GAGxBxB,EAAAa,UAAAE,WAAA,SAAWD,GACTX,KAAKI,cAAgBO,GAGvBd,EAAAa,UAAAe,SAAA,SAASC,GAIP,GAFAA,EAAMC,kBAED3B,KAAK4B,WAAY,CACpB5B,KAAKa,yBACL,IAAMgB,GAAY7B,KAAKI,cACnBJ,KAAKsB,kBACPtB,KAAKI,cAAgByB,EACrB7B,KAAKsB,gBAAgBO,IAEvB7B,KAAKC,YAAY6B,KAAKD,GAQxB7B,KAAK+B,WAGPlC,EAAAa,UAAAqB,QAAA,WACE/B,KAAKG,MAAM2B,QAEN9B,KAAK4B,YAAc5B,KAAKwB,gBAC3BxB,KAAKwB,kBAIT3B,EAAAa,UAAAsB,iBAAA,SAAiBJ,GACf5B,KAAK4B,WAAaA,GAGZ/B,EAAAa,UAAAG,uBAAA,WACNb,KAAKe,aAAaC,cAAciB,cAC9BjC,KAAKK,kBAAoBL,KAAKI,wCA3JnC8B,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,qBACVC,SAAU,ymBAwBVC,UAAW,CACT,CAAEC,QAASC,EAAAA,oBAAqBC,YAAa5C,iDAnCxC6C,EAAAA,cAAaC,WAAA,CAAA,CAAAC,KA2FjBC,EAAAA,kBA5F0BC,EAAAA,UAASH,WAAA,CAAA,CAAAC,KA6FnCC,EAAAA,UAAQ,CAAAD,KAAIG,EAAAA,yCAjDdC,EAAAA,0BAKAA,EAAAA,uBAKAA,EAAAA,wBAKAA,EAAAA,6BASAA,EAAAA,2BAQAC,EAAAA,sBAKAA,EAAAA,6BAEAC,EAAAA,UAASf,KAAA,CAAC,eAAgB,CAAEgB,QAAQ,aCrFvC,iCALCC,EAAAA,SAAQjB,KAAA,CAAC,CACRkB,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAC1D,GACf2D,QAAS,CAAC3D","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\n\nlet uniqueCheckboxCounter = 0;\n\n@Component({\n  selector: 'sof-input-checkbox',\n  template: `\n    <div class=\"custom-control custom-checkbox\">\n      <input\n        #inputElement\n        type=\"checkbox\"\n        [attr.id]=\"labelForId\"\n        [disabled]=\"isDisabled\"\n        class=\"custom-control-input\"\n        [class.is-invalid]=\"\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        \"\n        [checked]=\"internalValue\"\n        [attr.value]=\"internalValue\"\n      />\n      <label\n        [for]=\"labelForId\"\n        class=\"custom-control-label\"\n        (click)=\"onToggle($event)\"\n      >\n        {{ label }}\n      </label>\n    </div>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputCheckboxComponent }\n  ]\n})\nexport class InputCheckboxComponent\n  implements ControlValueAccessor, OnDestroy, OnSofFocus {\n  /**\n   * The translated label of the input.\n   */\n  @Input() label: string;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * Determines if the input is checked or not.\n   */\n  @Input() set selected(value: boolean) {\n    this.writeValue(value);\n    this.calculateIndeterminate();\n  }\n\n  /**\n   * Determines if the input is indeterminate or not.\n   * Checked true will always prevail over indeterminate true.\n   */\n  @Input() set indeterminate(value: boolean) {\n    this.isIndeterminate = value;\n    this.calculateIndeterminate();\n  }\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<boolean>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  @ViewChild('inputElement', { static: true }) inputElement: ElementRef;\n\n  internalValue: boolean = null;\n  isIndeterminate = false;\n  propagateChange: any;\n  propagateTouch: any;\n  labelForId = 'sof-input-checkbox-' + uniqueCheckboxCounter; // generate unique id\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    ++uniqueCheckboxCounter;\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: boolean): void {\n    this.internalValue = value;\n  }\n\n  onToggle(event: any): void {\n    // Prevent native functionality of browser input-checkbox\n    event.preventDefault();\n\n    if (!this.isDisabled) {\n      this.calculateIndeterminate();\n      const newValue = !this.internalValue;\n      if (this.propagateChange) {\n        this.internalValue = newValue;\n        this.propagateChange(newValue);\n      }\n      this.changeValue.emit(newValue);\n    }\n\n    // Must happen after propagateChange, if not it will not work properly when formControl has set updateOn: 'blur'.\n    // When updateOn: 'blur' is set the form control will only emit a value once the control is out of focus.\n    // By calling propagateTouch before propagateChange the old value is used as initial value instead of the new value.\n    // It seems that every propagateChange is ignored once the propagateTouch is triggered.\n    // The problem doesn't occur when updateOn is 'change' (default) as the control is not limited by propagateTouch.\n    this.onTouch();\n  }\n\n  onTouch(): void {\n    this.touch.emit();\n\n    if (!this.isDisabled && this.propagateTouch) {\n      this.propagateTouch();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  private calculateIndeterminate(): void {\n    this.inputElement.nativeElement.indeterminate =\n      this.isIndeterminate && !this.internalValue;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InputCheckboxComponent } from './input-checkbox.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [InputCheckboxComponent],\n  exports: [InputCheckboxComponent]\n})\nexport class InputCheckboxModule {}\n"]}