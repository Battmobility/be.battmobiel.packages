!function(o,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@sofico-framework/ui-kit/components/form"),require("@sofico-framework/ui-kit/directives/focus"),require("@angular/common"),require("@sofico-framework/ui-kit/components/svg-icon")):"function"==typeof define&&define.amd?define("@sofico-framework/ui-kit/components/input-password",["exports","@angular/core","@angular/forms","@sofico-framework/ui-kit/components/form","@sofico-framework/ui-kit/directives/focus","@angular/common","@sofico-framework/ui-kit/components/svg-icon"],t):t(((o="undefined"!=typeof globalThis?globalThis:o||self)["sofico-framework"]=o["sofico-framework"]||{},o["sofico-framework"]["ui-kit"]=o["sofico-framework"]["ui-kit"]||{},o["sofico-framework"]["ui-kit"].components=o["sofico-framework"]["ui-kit"].components||{},o["sofico-framework"]["ui-kit"].components["input-password"]={}),o.ng.core,o.ng.forms,o["sofico-framework"]["ui-kit"].components.form,o["sofico-framework"]["ui-kit"].directives.focus,o.ng.common,o["sofico-framework"]["ui-kit"].components["svg-icon"])}(this,(function(o,t,e,n,i,r,s){"use strict";var a=function(){function o(o,e){this.form=o,this.ngControl=e,this.showPlainText=!1,this.placeholder="",this.autocomplete="",this.changeValue=new t.EventEmitter,this.touch=new t.EventEmitter,this.internalValue=null,e&&(e.valueAccessor=this)}return Object.defineProperty(o.prototype,"value",{set:function(o){this.writeValue(o)},enumerable:!1,configurable:!0}),o.prototype.sofFocus=function(){this.inputElement.nativeElement.focus()},o.prototype.ngOnDestroy=function(){var o;(null===(o=this.ngControl)||void 0===o?void 0:o.valueAccessor)&&(this.ngControl.valueAccessor.writeValue=function(){})},o.prototype.registerOnChange=function(o){this.propagateChange=o},o.prototype.registerOnTouched=function(o){this.propagateTouch=o},o.prototype.writeValue=function(o){this.internalValue=null!=o?o:null},o.prototype.onChange=function(o){if(!this.isDisabled){var t=null!=o?o:null;this.changeValue.emit(t),this.propagateChange&&(this.internalValue=t,this.propagateChange(t))}},o.prototype.onTouch=function(){this.touch.emit(),!this.isDisabled&&this.propagateTouch&&this.propagateTouch()},o.prototype.setDisabledState=function(o){this.showPlainText=!1,this.isDisabled=o},o.prototype.toggle=function(){this.showPlainText=!this.showPlainText},o}();a.decorators=[{type:t.Component,args:[{selector:"sof-input-password",template:'\n    <div class="input-group">\n      <input\n        #inputElement\n        [attr.type]="showPlainText ? \'text\' : \'password\'"\n        [attr.id]="labelForId"\n        [attr.autocomplete]="autocomplete"\n        [value]="internalValue"\n        class="form-control"\n        [class.is-invalid]="\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        "\n        [placeholder]="placeholder"\n        [disabled]="isDisabled"\n        (input)="onChange($event.target?.value)"\n        (blur)="onTouch()"\n      />\n      <div class="input-group-append">\n        <button\n          class="btn btn-action"\n          [class.is-invalid]="\n            invalid ||\n            (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n          "\n          (click)="toggle()"\n          type="button"\n          [disabled]="isDisabled"\n        >\n          <sof-svg-icon icon="icon-eye" *ngIf="!showPlainText"></sof-svg-icon>\n          <sof-svg-icon\n            icon="icon-eye-crossed"\n            *ngIf="showPlainText"\n          ></sof-svg-icon>\n        </button>\n      </div>\n    </div>\n  ',providers:[{provide:i.SOF_FOCUS_COMPONENT,useExisting:a}],styles:[".input-group input{border-right:unset}.input-group.is-invalid:focus-within,.input-group:focus-within{outline:0}.input-group:focus-within .input-group-append .btn{box-shadow:unset;border-left-color:transparent}.input-group .form-control:focus{box-shadow:unset}.input-group .form-control.is-invalid:focus{border-right-color:transparent;box-shadow:unset}button{color:#555;cursor:pointer;display:flex;justify-content:center;border-top:1px solid #ced4da;border-bottom:1px solid #ced4da;border-right:1px solid #ced4da;align-items:center;background:#fff}button.btn.focus,button.btn:focus{box-shadow:none}:host{display:flex}:host .form-control.is-invalid,:host .was-validated .form-control:invalid{background-position:right 10px center}"]}]}],a.ctorParameters=function(){return[{type:n.FormComponent,decorators:[{type:t.Optional}]},{type:e.NgControl,decorators:[{type:t.Optional},{type:t.Host}]}]},a.propDecorators={labelForId:[{type:t.Input}],value:[{type:t.Input}],placeholder:[{type:t.Input}],autocomplete:[{type:t.Input}],isDisabled:[{type:t.Input}],invalid:[{type:t.Input}],changeValue:[{type:t.Output}],touch:[{type:t.Output}],inputElement:[{type:t.ViewChild,args:["inputElement"]}]};var u=function(){};u.decorators=[{type:t.NgModule,args:[{declarations:[a],exports:[a],imports:[r.CommonModule,s.SvgIconModule]}]}],o.InputPasswordComponent=a,o.InputPasswordModule=u,Object.defineProperty(o,"__esModule",{value:!0})}));
//# sourceMappingURL=sofico-framework-ui-kit-components-input-password.umd.min.js.map