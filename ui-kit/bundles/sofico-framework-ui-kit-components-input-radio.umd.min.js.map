{"version":3,"sources":["../../../../projects/sofico-framework/ui-kit/components/input-radio/input-radio.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-radio/input-radio.module.ts"],"names":["uniqueRadioCounter","InputRadioComponent","form","ngControl","this","changeValue","EventEmitter","labelForId","valueAccessor","prototype","sofFocus","inputElement","nativeElement","focus","onChange","e","changeFn","emit","writeValue","obj","registerOnChange","fn","registerOnTouched","touchFn","setDisabledState","isDisabled","Component","args","selector","template","providers","provide","SOF_FOCUS_COMPONENT","useExisting","FormComponent","decorators","type","Optional","NgControl","Input","Output","ViewChild","NgModule","imports","CommonModule","ReactiveFormsModule","declarations","exports"],"mappings":"8+BAgBA,IAAIA,EAAqB,eAqEvB,SAAAC,EACqBC,EACAC,GADAC,KAAAF,KAAAA,EACAE,KAAAD,UAAAA,EAXXC,KAAAC,YAAc,IAAIC,EAAAA,aAI5BF,KAAAG,WAAa,mBAAqBP,IAS9BA,EACEG,IACFA,EAAUK,cAAgBJ,aAI9BH,EAAAQ,UAAAC,SAAA,WACEN,KAAKO,aAAaC,cAAcC,SAGlCZ,EAAAQ,UAAAK,SAAA,SAASC,GACHX,KAAKY,UACPZ,KAAKY,SAASD,GAEhBX,KAAKC,YAAYY,KAAKF,IAGxBd,EAAAQ,UAAAS,WAAA,SAAWC,KAEXlB,EAAAQ,UAAAW,iBAAA,SAAiBC,GACfjB,KAAKY,SAAWK,GAGlBpB,EAAAQ,UAAAa,kBAAA,SAAkBD,GAChBjB,KAAKmB,QAAUF,GAGjBpB,EAAAQ,UAAAe,iBAAA,SAAiBC,GACfrB,KAAKqB,WAAaA,4BAnGrBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,SAAU,moBAuBVC,UAAW,CACT,CAAEC,QAASC,EAAAA,oBAAqBC,YAAahC,6DAlCxCiC,EAAAA,cAAaC,WAAA,CAAA,CAAAC,KA4EjBC,EAAAA,kBA7E0BC,EAAAA,UAASH,WAAA,CAAA,CAAAC,KA8EnCC,EAAAA,6CApCFE,EAAAA,oBAKAA,EAAAA,uBAKAA,EAAAA,0BAKAA,EAAAA,uBAKAA,EAAAA,2BAKAC,EAAAA,6BAEAC,EAAAA,UAASd,KAAA,CAAC,yBCpEb,iCALCe,EAAAA,SAAQf,KAAA,CAAC,CACRgB,QAAS,CAACC,EAAAA,aAAcC,EAAAA,qBACxBC,aAAc,CAAC7C,GACf8C,QAAS,CAAC9C","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\n\nlet uniqueRadioCounter = 0;\n\n@Component({\n  selector: 'sof-input-radio',\n  template: `\n    <div class=\"custom-control custom-radio\">\n      <input\n        #inputElement\n        type=\"radio\"\n        [attr.id]=\"labelForId\"\n        [value]=\"value\"\n        [disabled]=\"isDisabled\"\n        [attr.name]=\"name\"\n        [checked]=\"value === ngControl?.value || checked\"\n        (change)=\"onChange(value)\"\n        [class.is-invalid]=\"\n          invalid ||\n          (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n        \"\n        class=\"custom-control-input\"\n      />\n      <label class=\"custom-control-label\" [attr.for]=\"labelForId\">\n        <ng-content></ng-content>\n      </label>\n    </div>\n  `,\n  styleUrls: ['./input-radio.component.scss'],\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputRadioComponent }\n  ]\n})\nexport class InputRadioComponent implements ControlValueAccessor, OnSofFocus {\n  /**\n   * Determines the value of the control.\n   */\n  @Input() value: any;\n\n  /**\n   * Determines the name of the control.\n   */\n  @Input() name: string;\n\n  /**\n   * Determines whether the control is checked or not.\n   */\n  @Input() checked: boolean;\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<any>();\n\n  @ViewChild('inputElement') inputElement: ElementRef;\n\n  labelForId = 'sof-input-radio-' + uniqueRadioCounter; // generate unique id\n\n  changeFn;\n  touchFn;\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() public ngControl: NgControl\n  ) {\n    ++uniqueRadioCounter;\n    if (ngControl) {\n      ngControl.valueAccessor = this as any;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  onChange(e: any): void {\n    if (this.changeFn) {\n      this.changeFn(e);\n    }\n    this.changeValue.emit(e);\n  }\n\n  writeValue(obj: any): void {}\n\n  registerOnChange(fn: any): void {\n    this.changeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.touchFn = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { InputRadioComponent } from './input-radio.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [InputRadioComponent],\n  exports: [InputRadioComponent]\n})\nexport class InputRadioModule {}\n"]}