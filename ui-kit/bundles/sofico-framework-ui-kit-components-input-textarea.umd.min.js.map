{"version":3,"sources":["../../../../projects/sofico-framework/ui-kit/components/input-textarea/input-textarea.component.ts","../../../../projects/sofico-framework/ui-kit/components/input-textarea/input-textarea.module.ts"],"names":["InputTextareaComponent","form","ngControl","this","resizable","placeholder","changeValue","EventEmitter","touch","internalValue","valueAccessor","Object","defineProperty","prototype","value","writeValue","sofFocus","inputElement","nativeElement","focus","ngOnDestroy","_a","registerOnChange","fn","propagateChange","registerOnTouched","propagateTouch","onChange","isDisabled","newInternalValue","emit","onTouch","setDisabledState","Component","args","selector","template","providers","provide","SOF_FOCUS_COMPONENT","useExisting","FormComponent","decorators","type","Optional","NgControl","Host","Input","Output","ViewChild","NgModule","imports","CommonModule","declarations","exports"],"mappings":"qgCA2FE,SAAAA,EACqBC,EACQC,GADRC,KAAAF,KAAAA,EACQE,KAAAD,UAAAA,EA/CpBC,KAAAC,WAAY,EAiBZD,KAAAE,YAAc,GAebF,KAAAG,YAAc,IAAIC,EAAAA,aAKlBJ,KAAAK,MAAQ,IAAID,EAAAA,aAEtBJ,KAAAM,cAAwB,KAUlBP,IACFA,EAAUQ,cAAgBP,aAxC9BQ,OAAAC,eAAaZ,EAAAa,UAAA,QAAK,KAAlB,SAAmBC,GACjBX,KAAKY,WAAWD,oCA2ClBd,EAAAa,UAAAG,SAAA,WACEb,KAAKc,aAAaC,cAAcC,SAGlCnB,EAAAa,UAAAO,YAAA,kBACoB,QAAlBC,EAAIlB,KAAKD,iBAAS,IAAAmB,OAAA,EAAAA,EAAEX,iBAMlBP,KAAKD,UAAUQ,cAAcK,WAAa,eAI9Cf,EAAAa,UAAAS,iBAAA,SAAiBC,GACfpB,KAAKqB,gBAAkBD,GAGzBvB,EAAAa,UAAAY,kBAAA,SAAkBF,GAChBpB,KAAKuB,eAAiBH,GAGxBvB,EAAAa,UAAAE,WAAA,SAAWD,GACTX,KAAKM,cAAgBK,MAAAA,EAAAA,EAAS,MAGhCd,EAAAa,UAAAc,SAAA,SAASb,GACP,IAAKX,KAAKyB,WAAY,CACpB,IAAMC,EAAmBf,MAAAA,EAAAA,EAAS,KAGlCX,KAAKG,YAAYwB,KAAKD,GAGlB1B,KAAKqB,kBACPrB,KAAKM,cAAgBoB,EACrB1B,KAAKqB,gBAAgBK,MAK3B7B,EAAAa,UAAAkB,QAAA,WACE5B,KAAKK,MAAMsB,QAEN3B,KAAKyB,YAAczB,KAAKuB,gBAC3BvB,KAAKuB,kBAIT1B,EAAAa,UAAAmB,iBAAA,SAAiBlB,GACfX,KAAKyB,WAAad,4BAtIrBmB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,qBAEVC,SAAU,8cAiBVC,UAAW,CACT,CAAEC,QAASC,EAAAA,oBAAqBC,YAAaxC,wFA3BxCyC,EAAAA,cAAaC,WAAA,CAAA,CAAAC,KAiFjBC,EAAAA,kBAlF0BC,EAAAA,UAASH,WAAA,CAAA,CAAAC,KAmFnCC,EAAAA,UAAQ,CAAAD,KAAIG,EAAAA,6CA/CdC,EAAAA,0BAKAA,EAAAA,qBAKAA,EAAAA,2BAOAA,EAAAA,0BAKAA,EAAAA,uBAKAA,EAAAA,2BAKAC,EAAAA,sBAKAA,EAAAA,6BAMAC,EAAAA,UAASf,KAAA,CAAC,yBChFb,iCALCgB,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACrD,GACfsD,QAAS,CAACtD","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Host,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FormComponent } from '@sofico-framework/ui-kit/components/form';\nimport {\n  OnSofFocus,\n  SOF_FOCUS_COMPONENT\n} from '@sofico-framework/ui-kit/directives/focus';\n\n@Component({\n  selector: 'sof-input-textarea',\n  styleUrls: ['./input-textarea.component.scss'],\n  template: `\n    <textarea\n      #inputElement\n      [attr.id]=\"labelForId\"\n      [value]=\"internalValue\"\n      class=\"form-control\"\n      [class.is-invalid]=\"\n        invalid ||\n        (ngControl?.invalid && (ngControl?.touched || form?.submitted))\n      \"\n      [class.not-resizable]=\"!resizable\"\n      [placeholder]=\"placeholder\"\n      [disabled]=\"isDisabled\"\n      (input)=\"onChange($event.target?.value)\"\n      (blur)=\"onTouch()\"\n    ></textarea>\n  `,\n  providers: [\n    { provide: SOF_FOCUS_COMPONENT, useExisting: InputTextareaComponent }\n  ]\n})\nexport class InputTextareaComponent\n  implements ControlValueAccessor, OnDestroy, OnSofFocus {\n  /**\n   * Determines if the textarea should be resizable. Default: true\n   */\n  @Input() resizable = true;\n\n  /**\n   * The id of the input to connect to a label tag.\n   */\n  @Input() labelForId: string;\n\n  /**\n   * Determines the value of the control.\n   */\n  @Input() set value(value: string) {\n    this.writeValue(value);\n  }\n\n  /**\n   * The placeholder of the input.\n   */\n  @Input() placeholder = '';\n\n  /**\n   *  Determines if the input is disabled.\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * Determines whether the input is in a valid state.\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * EventEmitter that will emit the value when changed.\n   */\n  @Output() changeValue = new EventEmitter<string>();\n\n  /**\n   * EventEmitter that will emit when control is touched.\n   */\n  @Output() touch = new EventEmitter<any>();\n\n  internalValue: string = null;\n  propagateChange: any;\n  propagateTouch: any;\n\n  @ViewChild('inputElement') inputElement;\n\n  constructor(\n    @Optional() public form: FormComponent,\n    @Optional() @Host() public ngControl: NgControl\n  ) {\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  sofFocus(): void {\n    this.inputElement.nativeElement.focus();\n  }\n\n  ngOnDestroy(): void {\n    if (this.ngControl?.valueAccessor) {\n      // Every time a control is re-created the previous writeValue reference(s) is not cleaned up.\n      // So, over time, a lot of these references can be built up. This memory leak is a bug in Angular's implementation of ControlValueAccessor.\n      // We hide that problem by assigning an empty function to writeValue every time we destroy the control.\n      // An detailed explanation of the problem can be found here: https://github.com/angular/angular/pull/29335\n      // The bug issue for it: https://github.com/angular/angular/issues/20007\n      this.ngControl.valueAccessor.writeValue = () => {};\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: string): void {\n    this.internalValue = value ?? null;\n  }\n\n  onChange(value: string): void {\n    if (!this.isDisabled) {\n      const newInternalValue = value ?? null;\n\n      // emit value\n      this.changeValue.emit(newInternalValue);\n\n      // propagate the change\n      if (this.propagateChange) {\n        this.internalValue = newInternalValue;\n        this.propagateChange(newInternalValue);\n      }\n    }\n  }\n\n  onTouch(): void {\n    this.touch.emit();\n\n    if (!this.isDisabled && this.propagateTouch) {\n      this.propagateTouch();\n    }\n  }\n\n  setDisabledState(value: boolean): void {\n    this.isDisabled = value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InputTextareaComponent } from './input-textarea.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [InputTextareaComponent],\n  exports: [InputTextareaComponent]\n})\nexport class InputTextareaModule {}\n"]}