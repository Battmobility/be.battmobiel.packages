{"version":3,"sources":["../../../../projects/sofico-framework/ui-kit/components/in-view/in-view.component.ts","../../../../projects/sofico-framework/ui-kit/components/in-view/in-view.module.ts"],"names":["InViewComponent","this","scrollableRef","preloadHeight","inView","EventEmitter","prototype","ngOnInit","_this","intersectionObserver","IntersectionObserver","entries","emit","_b","_a","sort","a","b","time","isIntersecting","root","rootMargin","observe","targetRef","nativeElement","ngOnDestroy","disconnect","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","template","Input","Output","ViewChild","read","ElementRef","static","NgModule","declarations","exports","imports","CommonModule"],"mappings":"0pBAYA,SAAAA,IAYWC,KAAAC,cAAqB,KACrBD,KAAAE,cAAgB,EAEfF,KAAAG,OAAS,IAAIC,EAAAA,oBAOvBL,EAAAM,UAAAC,SAAA,WAAA,IAAAC,EAAAP,KAOEA,KAAKQ,qBAAuB,IAAIC,sBALrB,SAACC,WACV,OAAAH,EAAKJ,OAAOQ,KAC4C,QADxCC,EACoC,QADpCC,EACdH,EAAQI,MAAK,SAACC,EAAGC,GAAM,OAACD,EAAEE,KAAOD,EAAEC,MAAQ,EAAI,YAAG,IAAAJ,OAAA,EAAAA,EAAG,UAAC,IAAAD,OAAA,EAAAA,EAAGM,kBAGJ,CACvDC,KAAMnB,KAAKC,cACXmB,WAAY,WAAWpB,KAAKE,cAAa,WAG3CF,KAAKQ,qBAAqBa,QAAQrB,KAAKsB,UAAUC,gBAGnDxB,EAAAM,UAAAmB,YAAA,WACExB,KAAKQ,qBAAqBiB,uCAtC7BC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,cACVC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,SAAU,kTASTC,EAAAA,6BACAA,EAAAA,sBAEAC,EAAAA,0BAEAC,EAAAA,UAASR,KAAA,CAAC,YAAa,CAAES,KAAMC,EAAAA,WAAYC,QAAQ,aCpBtD,iCALCC,EAAAA,SAAQZ,KAAA,CAAC,CACRa,aAAc,CAACzC,GACf0C,QAAS,CAAC1C,GACV2C,QAAS,CAACC,EAAAA","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\n\n@Component({\n  selector: 'sof-in-view',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <ng-content></ng-content>\n    <div class=\"in-slice\">\n      <div #targetRef></div>\n    </div>\n  `,\n  styleUrls: ['./in-view.component.scss']\n})\nexport class InViewComponent implements OnInit, OnDestroy {\n  @Input() scrollableRef: any = null;\n  @Input() preloadHeight = 0;\n\n  @Output() inView = new EventEmitter<boolean>();\n\n  @ViewChild('targetRef', { read: ElementRef, static: true })\n  targetRef: ElementRef;\n\n  private intersectionObserver: IntersectionObserver;\n\n  ngOnInit(): void {\n    // We should only emit the most recent event\n    const fn = (entries: IntersectionObserverEntry[]) =>\n      this.inView.emit(\n        entries.sort((a, b) => (a.time > b.time ? -1 : 1))?.[0]?.isIntersecting\n      );\n\n    this.intersectionObserver = new IntersectionObserver(fn, {\n      root: this.scrollableRef,\n      rootMargin: `0px 0px ${this.preloadHeight}px 0px`\n    });\n\n    this.intersectionObserver.observe(this.targetRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.intersectionObserver.disconnect();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InViewComponent } from './in-view.component';\n\n@NgModule({\n  declarations: [InViewComponent],\n  exports: [InViewComponent],\n  imports: [CommonModule]\n})\nexport class InViewModule {}\n"]}