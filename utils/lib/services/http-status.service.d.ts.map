{"version":3,"file":"http-status.service.d.ts","sources":["http-status.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ActingErrorMessage } from '../types/acting-error-message.type';\nexport declare class HttpStatusService {\n    private loadingSub$;\n    /**\n     * When navigating to a page it can be possible that the last value of the loading is false\n     * When the user navigates to that page and that page starts loading the new value of the loading is true\n     * Because of that we get the ExpressionChangedAfterItHasBeenCheckedError and we get a flickr in some cases\n     * For that reason we are using a debounceTime of 0 to ensure a fluent loading experience\n     */\n    loading$: import(\"rxjs\").Observable<boolean>;\n    private actingSub$;\n    acting$: import(\"rxjs\").Observable<boolean>;\n    private getErrorSub$;\n    getError$: import(\"rxjs\").Observable<string>;\n    private actingErrorsSub$;\n    actingErrors$: import(\"rxjs\").Observable<ActingErrorMessage[]>;\n    private attached;\n    set loading(val: boolean);\n    set acting(val: boolean);\n    set getError(val: string);\n    set actingErrors(val: ActingErrorMessage[]);\n    /**\n     * Detaches the interceptor from the loading status.\n     * This is used when we don't want to show loading spinners for\n     * some actions of the page (like polling)\n     * Don't forget to use the reattach function afterwards\n     */\n    detach(): void;\n    /**\n     * Reattaches the interceptor to the loading status\n     * Has to be called on every page that uses the detach functionality\n     */\n    reattach(): void;\n}\n"]}