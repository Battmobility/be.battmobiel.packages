import { isNullOrUndefined } from './is-null-or-undefined.util';
export function dateWithoutTimeEquals(date1, date2) {
    if (isNullOrUndefined(date1) && isNullOrUndefined(date2)) {
        return true;
    }
    if (!isNullOrUndefined(date1) && !isNullOrUndefined(date2)) {
        const cleanDate1 = getCleanDate(date1);
        const cleanDate2 = getCleanDate(date2);
        return cleanDate1.getTime() === cleanDate2.getTime();
    }
    return false;
}
export function dateWithoutTimeBefore(date1, date2) {
    if (!isNullOrUndefined(date1) && !isNullOrUndefined(date2)) {
        const cleanDate1 = getCleanDate(date1);
        const cleanDate2 = getCleanDate(date2);
        return cleanDate1.getTime() < cleanDate2.getTime();
    }
    return false;
}
export function dateWithoutTimeAfter(date1, date2) {
    if (!isNullOrUndefined(date1) && !isNullOrUndefined(date2)) {
        const cleanDate1 = getCleanDate(date1);
        const cleanDate2 = getCleanDate(date2);
        return cleanDate1.getTime() > cleanDate2.getTime();
    }
    return false;
}
export function timeWithoutDateEquals(time1, time2) {
    if (isNullOrUndefined(time1) && isNullOrUndefined(time2)) {
        return true;
    }
    if (!isNullOrUndefined(time1) && !isNullOrUndefined(time2)) {
        const cleanTime1 = getCleanTime(time1);
        const cleanTime2 = getCleanTime(time2);
        return cleanTime1.getTime() === cleanTime2.getTime();
    }
    return false;
}
export function timeWithoutDateBefore(time1, time2) {
    if (!isNullOrUndefined(time1) && !isNullOrUndefined(time2)) {
        const cleanTime1 = getCleanTime(time1);
        const cleanTime2 = getCleanTime(time2);
        return cleanTime1.getTime() < cleanTime2.getTime();
    }
}
export function timeWithoutDateAfter(time1, time2) {
    if (!isNullOrUndefined(time1) && !isNullOrUndefined(time2)) {
        const cleanTime1 = getCleanTime(time1);
        const cleanTime2 = getCleanTime(time2);
        return cleanTime1.getTime() > cleanTime2.getTime();
    }
}
function getCleanTime(time) {
    const cleanTime = new Date(time.getTime());
    cleanTime.setFullYear(2020, 0, 1);
    cleanTime.setMilliseconds(0);
    return cleanTime;
}
function getCleanDate(date) {
    const cleanDate = new Date(date.getTime());
    cleanDate.setHours(0, 0, 0, 0);
    return cleanDate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc29maWNvLWZyYW1ld29yay91dGlscy9zcmMvbGliL3V0aWxzL2RhdGUudXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVoRSxNQUFNLFVBQVUscUJBQXFCLENBQUMsS0FBVyxFQUFFLEtBQVc7SUFDNUQsSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN4RCxPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDMUQsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV2QyxPQUFPLFVBQVUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDdEQ7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsS0FBVyxFQUFFLEtBQVc7SUFDNUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDMUQsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV2QyxPQUFPLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDcEQ7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsS0FBVyxFQUFFLEtBQVc7SUFDM0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDMUQsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV2QyxPQUFPLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDcEQ7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsS0FBVyxFQUFFLEtBQVc7SUFDNUQsSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN4RCxPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDMUQsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV2QyxPQUFPLFVBQVUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDdEQ7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsS0FBVyxFQUFFLEtBQVc7SUFDNUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDMUQsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV2QyxPQUFPLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDcEQ7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEtBQVcsRUFBRSxLQUFXO0lBQzNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzFELE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdkMsT0FBTyxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3BEO0FBQ0gsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLElBQVU7SUFDOUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFM0MsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFN0IsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLElBQVU7SUFDOUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFM0MsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUUvQixPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOdWxsT3JVbmRlZmluZWQgfSBmcm9tICcuL2lzLW51bGwtb3ItdW5kZWZpbmVkLnV0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVdpdGhvdXRUaW1lRXF1YWxzKGRhdGUxOiBEYXRlLCBkYXRlMjogRGF0ZSk6IGJvb2xlYW4ge1xuICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoZGF0ZTEpICYmIGlzTnVsbE9yVW5kZWZpbmVkKGRhdGUyKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICghaXNOdWxsT3JVbmRlZmluZWQoZGF0ZTEpICYmICFpc051bGxPclVuZGVmaW5lZChkYXRlMikpIHtcbiAgICBjb25zdCBjbGVhbkRhdGUxID0gZ2V0Q2xlYW5EYXRlKGRhdGUxKTtcbiAgICBjb25zdCBjbGVhbkRhdGUyID0gZ2V0Q2xlYW5EYXRlKGRhdGUyKTtcblxuICAgIHJldHVybiBjbGVhbkRhdGUxLmdldFRpbWUoKSA9PT0gY2xlYW5EYXRlMi5nZXRUaW1lKCk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVdpdGhvdXRUaW1lQmVmb3JlKGRhdGUxOiBEYXRlLCBkYXRlMjogRGF0ZSk6IGJvb2xlYW4ge1xuICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGRhdGUxKSAmJiAhaXNOdWxsT3JVbmRlZmluZWQoZGF0ZTIpKSB7XG4gICAgY29uc3QgY2xlYW5EYXRlMSA9IGdldENsZWFuRGF0ZShkYXRlMSk7XG4gICAgY29uc3QgY2xlYW5EYXRlMiA9IGdldENsZWFuRGF0ZShkYXRlMik7XG5cbiAgICByZXR1cm4gY2xlYW5EYXRlMS5nZXRUaW1lKCkgPCBjbGVhbkRhdGUyLmdldFRpbWUoKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRlV2l0aG91dFRpbWVBZnRlcihkYXRlMTogRGF0ZSwgZGF0ZTI6IERhdGUpOiBib29sZWFuIHtcbiAgaWYgKCFpc051bGxPclVuZGVmaW5lZChkYXRlMSkgJiYgIWlzTnVsbE9yVW5kZWZpbmVkKGRhdGUyKSkge1xuICAgIGNvbnN0IGNsZWFuRGF0ZTEgPSBnZXRDbGVhbkRhdGUoZGF0ZTEpO1xuICAgIGNvbnN0IGNsZWFuRGF0ZTIgPSBnZXRDbGVhbkRhdGUoZGF0ZTIpO1xuXG4gICAgcmV0dXJuIGNsZWFuRGF0ZTEuZ2V0VGltZSgpID4gY2xlYW5EYXRlMi5nZXRUaW1lKCk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZVdpdGhvdXREYXRlRXF1YWxzKHRpbWUxOiBEYXRlLCB0aW1lMjogRGF0ZSk6IGJvb2xlYW4ge1xuICBpZiAoaXNOdWxsT3JVbmRlZmluZWQodGltZTEpICYmIGlzTnVsbE9yVW5kZWZpbmVkKHRpbWUyKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICghaXNOdWxsT3JVbmRlZmluZWQodGltZTEpICYmICFpc051bGxPclVuZGVmaW5lZCh0aW1lMikpIHtcbiAgICBjb25zdCBjbGVhblRpbWUxID0gZ2V0Q2xlYW5UaW1lKHRpbWUxKTtcbiAgICBjb25zdCBjbGVhblRpbWUyID0gZ2V0Q2xlYW5UaW1lKHRpbWUyKTtcblxuICAgIHJldHVybiBjbGVhblRpbWUxLmdldFRpbWUoKSA9PT0gY2xlYW5UaW1lMi5nZXRUaW1lKCk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZVdpdGhvdXREYXRlQmVmb3JlKHRpbWUxOiBEYXRlLCB0aW1lMjogRGF0ZSk6IGJvb2xlYW4ge1xuICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHRpbWUxKSAmJiAhaXNOdWxsT3JVbmRlZmluZWQodGltZTIpKSB7XG4gICAgY29uc3QgY2xlYW5UaW1lMSA9IGdldENsZWFuVGltZSh0aW1lMSk7XG4gICAgY29uc3QgY2xlYW5UaW1lMiA9IGdldENsZWFuVGltZSh0aW1lMik7XG5cbiAgICByZXR1cm4gY2xlYW5UaW1lMS5nZXRUaW1lKCkgPCBjbGVhblRpbWUyLmdldFRpbWUoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZVdpdGhvdXREYXRlQWZ0ZXIodGltZTE6IERhdGUsIHRpbWUyOiBEYXRlKTogYm9vbGVhbiB7XG4gIGlmICghaXNOdWxsT3JVbmRlZmluZWQodGltZTEpICYmICFpc051bGxPclVuZGVmaW5lZCh0aW1lMikpIHtcbiAgICBjb25zdCBjbGVhblRpbWUxID0gZ2V0Q2xlYW5UaW1lKHRpbWUxKTtcbiAgICBjb25zdCBjbGVhblRpbWUyID0gZ2V0Q2xlYW5UaW1lKHRpbWUyKTtcblxuICAgIHJldHVybiBjbGVhblRpbWUxLmdldFRpbWUoKSA+IGNsZWFuVGltZTIuZ2V0VGltZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldENsZWFuVGltZSh0aW1lOiBEYXRlKTogRGF0ZSB7XG4gIGNvbnN0IGNsZWFuVGltZSA9IG5ldyBEYXRlKHRpbWUuZ2V0VGltZSgpKTtcblxuICBjbGVhblRpbWUuc2V0RnVsbFllYXIoMjAyMCwgMCwgMSk7XG4gIGNsZWFuVGltZS5zZXRNaWxsaXNlY29uZHMoMCk7XG5cbiAgcmV0dXJuIGNsZWFuVGltZTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xlYW5EYXRlKGRhdGU6IERhdGUpOiBEYXRlIHtcbiAgY29uc3QgY2xlYW5EYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuXG4gIGNsZWFuRGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblxuICByZXR1cm4gY2xlYW5EYXRlO1xufVxuIl19