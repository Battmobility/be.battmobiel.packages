import { of } from 'rxjs';
import { map } from 'rxjs/operators';
export class CustomTranslationHandler {
    handle(params) {
        const defaultContext = '@COMMON';
        const missingContext = 'TRANSLATE:';
        const parts = 2;
        const translationKeyArray = params.key.split('.');
        if (translationKeyArray.length !== parts) {
            const error = `${missingContext} invalid key. It's made of ${translationKeyArray.length} part(s) should be ${parts} [${params.key}]`;
            console.error(error);
            return of(error);
        }
        if (['', 'undefined', 'null'].includes(translationKeyArray[0].trim())) {
            const error = `${missingContext} tc seems to be ${translationKeyArray[0]}. [${params.key}]`;
            console.error(error);
            return of(error);
        }
        if (translationKeyArray[0] === defaultContext) {
            return params.key;
        }
        translationKeyArray[0] = defaultContext;
        const newTranslationKey = translationKeyArray.join('.');
        return (params.translateService
            // when get doesn't find a translation, the handler is called again
            // the if statement above is then executed
            .get(newTranslationKey, params.interpolateParams)
            .pipe(map(v => (v === newTranslationKey ? missingContext + params.key : v))));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXRyYW5zbGF0aW9uLmhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zb2ZpY28tZnJhbWV3b3JrL3V0aWxzL3NyYy9saWIvY2xhc3Nlcy9jdXN0b20tdHJhbnNsYXRpb24uaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxNQUFNLE9BQU8sd0JBQXdCO0lBQ25DLE1BQU0sQ0FBQyxNQUF1QztRQUM1QyxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7UUFDakMsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDO1FBQ3BDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNoQixNQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxELElBQUksbUJBQW1CLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRTtZQUN4QyxNQUFNLEtBQUssR0FBRyxHQUFHLGNBQWMsOEJBQThCLG1CQUFtQixDQUFDLE1BQU0sc0JBQXNCLEtBQUssS0FBSyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDckksT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsQjtRQUVELElBQUksQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFO1lBQ3JFLE1BQU0sS0FBSyxHQUFHLEdBQUcsY0FBYyxtQkFBbUIsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLE1BQU0sTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQzVGLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEI7UUFFRCxJQUFJLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxLQUFLLGNBQWMsRUFBRTtZQUM3QyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUM7U0FDbkI7UUFFRCxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUM7UUFDeEMsTUFBTSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEQsT0FBTyxDQUNMLE1BQU0sQ0FBQyxnQkFBZ0I7WUFDckIsbUVBQW1FO1lBQ25FLDBDQUEwQzthQUN6QyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLGlCQUFpQixDQUFDO2FBQ2hELElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3RFLENBQ0osQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIsXG4gIE1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJQYXJhbXNcbn0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY2xhc3MgQ3VzdG9tVHJhbnNsYXRpb25IYW5kbGVyIGltcGxlbWVudHMgTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlciB7XG4gIGhhbmRsZShwYXJhbXM6IE1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJQYXJhbXMpOiBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIGNvbnN0IGRlZmF1bHRDb250ZXh0ID0gJ0BDT01NT04nO1xuICAgIGNvbnN0IG1pc3NpbmdDb250ZXh0ID0gJ1RSQU5TTEFURTonO1xuICAgIGNvbnN0IHBhcnRzID0gMjtcbiAgICBjb25zdCB0cmFuc2xhdGlvbktleUFycmF5ID0gcGFyYW1zLmtleS5zcGxpdCgnLicpO1xuXG4gICAgaWYgKHRyYW5zbGF0aW9uS2V5QXJyYXkubGVuZ3RoICE9PSBwYXJ0cykge1xuICAgICAgY29uc3QgZXJyb3IgPSBgJHttaXNzaW5nQ29udGV4dH0gaW52YWxpZCBrZXkuIEl0J3MgbWFkZSBvZiAke3RyYW5zbGF0aW9uS2V5QXJyYXkubGVuZ3RofSBwYXJ0KHMpIHNob3VsZCBiZSAke3BhcnRzfSBbJHtwYXJhbXMua2V5fV1gO1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gb2YoZXJyb3IpO1xuICAgIH1cblxuICAgIGlmIChbJycsICd1bmRlZmluZWQnLCAnbnVsbCddLmluY2x1ZGVzKHRyYW5zbGF0aW9uS2V5QXJyYXlbMF0udHJpbSgpKSkge1xuICAgICAgY29uc3QgZXJyb3IgPSBgJHttaXNzaW5nQ29udGV4dH0gdGMgc2VlbXMgdG8gYmUgJHt0cmFuc2xhdGlvbktleUFycmF5WzBdfS4gWyR7cGFyYW1zLmtleX1dYDtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIG9mKGVycm9yKTtcbiAgICB9XG5cbiAgICBpZiAodHJhbnNsYXRpb25LZXlBcnJheVswXSA9PT0gZGVmYXVsdENvbnRleHQpIHtcbiAgICAgIHJldHVybiBwYXJhbXMua2V5O1xuICAgIH1cblxuICAgIHRyYW5zbGF0aW9uS2V5QXJyYXlbMF0gPSBkZWZhdWx0Q29udGV4dDtcbiAgICBjb25zdCBuZXdUcmFuc2xhdGlvbktleSA9IHRyYW5zbGF0aW9uS2V5QXJyYXkuam9pbignLicpO1xuICAgIHJldHVybiAoXG4gICAgICBwYXJhbXMudHJhbnNsYXRlU2VydmljZVxuICAgICAgICAvLyB3aGVuIGdldCBkb2Vzbid0IGZpbmQgYSB0cmFuc2xhdGlvbiwgdGhlIGhhbmRsZXIgaXMgY2FsbGVkIGFnYWluXG4gICAgICAgIC8vIHRoZSBpZiBzdGF0ZW1lbnQgYWJvdmUgaXMgdGhlbiBleGVjdXRlZFxuICAgICAgICAuZ2V0KG5ld1RyYW5zbGF0aW9uS2V5LCBwYXJhbXMuaW50ZXJwb2xhdGVQYXJhbXMpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIG1hcCh2ID0+ICh2ID09PSBuZXdUcmFuc2xhdGlvbktleSA/IG1pc3NpbmdDb250ZXh0ICsgcGFyYW1zLmtleSA6IHYpKVxuICAgICAgICApXG4gICAgKTtcbiAgfVxufVxuIl19