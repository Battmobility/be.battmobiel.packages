import { map, switchMap } from 'rxjs/operators';
// creating a custom operator
// declarative way of programming, it's easy to read the flow of this
// function
/**
 * Search for objects in an array - caches, so if destroyed, cache is lost
 * The source stream is the list of objects
 * @param term$ a stream of string(s), each string is a search action. If a new string is sent before the last one was resolved, the old one will be skiped
 * @param props an array of strings and/or functions that point to properties with the values to be searched. Be aware, the functions may not error, or it will break the search.
 */
export function search(term$, props) {
    return source => source.pipe(
    // create indexMap for all items in the source stream
    map(results => results && Array.isArray(results)
        ? results.map(original => ({
            original,
            terms: getTermsFromObject(original, props)
        }))
        : results), switchMap(indexMap => 
    // indexMap is cached in the closure of this function
    term$.pipe(
    // call filterResults on every term change
    map((term) => indexMap && Array.isArray(indexMap)
        ? filterResults(indexMap, term)
        : indexMap))));
}
// it's important that the following functions are private
// we don't want to use them anywhere else then here
// we can also see that the functions are written in a more functional manner
// .map.filter.map makes it declarative instead of imperative
// this makes the code more readable
function getTermsFromObject(obj, props) {
    const terms = [];
    props.forEach(prop => typeof prop === 'string' || prop instanceof String
        ? getValues([obj], prop.split('.')).forEach(val => terms.push(val))
        : terms.push(prop(obj)));
    return terms
        .filter(value => typeof value === 'string' || typeof value === 'number')
        .map(value => normalizeToken(value.toString()));
}
function getValues(obj, path) {
    // filter out null and undefined
    obj = obj.filter(v => !!v);
    // if path has the length of 0, the obj is the value
    if (path.length === 0) {
        return obj;
    }
    let children = [];
    for (const item of obj) {
        const child = item[path[0]];
        // if it is an array, we consider all its items as child
        if (Array.isArray(child)) {
            children = [...children, ...child];
        }
        else {
            // if that's an object / primitive, add it as child
            children = [...children, child];
        }
    }
    path.shift();
    return getValues(children, path);
}
function filterResults(indexMap, searchTerm) {
    const terms = searchTerm.split(RegExp(` +`)).map(normalizeToken);
    return indexMap
        .filter(row => rowMatchesTerms(row, terms))
        .map(v => v.original);
}
function normalizeToken(token) {
    return token.toLowerCase().replace(/[-_'",;.!? ]/g, '');
}
function rowMatchesTerms(row, searchTerms) {
    for (const term of searchTerms) {
        if (row.terms.find(documentTerm => termsMatch(term, documentTerm)) ===
            undefined) {
            return false;
        }
    }
    return true;
}
function termsMatch(requestTerm, documentTerm) {
    return documentTerm.includes(requestTerm);
}
//# sourceMappingURL=data:application/json;base64,