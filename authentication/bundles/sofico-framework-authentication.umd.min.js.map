{"version":3,"sources":["../../../../projects/sofico-framework/authentication/src/lib/services/authenticated-result.service.ts","../../../../projects/sofico-framework/authentication/src/lib/services/authentication.service.ts","../../../../projects/sofico-framework/authentication/src/lib/guards/authenticated.guard.ts","../../../../projects/sofico-framework/authentication/src/lib/guards/guest.guard.ts","../../../../projects/sofico-framework/authentication/src/lib/interceptors/custom-oauth.interceptor.ts","../../../../projects/sofico-framework/authentication/src/lib/interceptors/resource-server-auto-logout-error-handler.ts","../../../../projects/sofico-framework/authentication/src/lib/stores/session-storage-oauth.store.ts","../../../../projects/sofico-framework/authentication/src/lib/authentication.module.ts"],"names":["AuthenticatedResultService","this","_authenticatedResult$","ReplaySubject","Object","defineProperty","prototype","asObservable","pipe","distinctUntilChanged","setAuthenticatedResult","value","next","Injectable","AuthenticationService","httpClient","windowRefService","oauthService","router","configService","authenticatedResultService","platformLocation","location","nativeWindow","baseHref","origin","getBaseHrefFromDOM","config","auth","grant","Error","configureLoginWithSSO","listenOnErrorReceivedAndLogout","loginWithSingleSignOn","initImplicitFlow","logout","pathBasedRedirectUri","redirectUri","calculateRedirectUri","logOut","logoutWithoutRedirect","setPostLogoutRedirectUri","uri","postLogoutRedirectUri","_this","languageParam","getLanguageParam","authConfig","clientId","issuer","calculateIssuer","silentRefreshRedirectUri","configure","customQueryParams","kc_locale","tokenValidationHandler","JwksValidationHandler","loadDiscoveryDocumentAndTryLogin","then","hasValidIdToken","catch","setupAutomaticSilentRefresh","_a","protocol","host","pathname","search","baseUrl","realm","events","filter","event","type","take","subscribe","queryString","URLSearchParams","get","HttpClient","WindowRefService","OAuthService","Router","ConfigService","PlatformLocation","AuthenticatedGuard","authenticationService","canActivate","authenticatedResult$","tap","authenticated","GuestGuard","map","navigate","CustomOAuthInterceptor","authStorage","errorHandler","intercept","req","url","toLowerCase","allowedUrls","checkUrl","v","mergeMap","header","getItem","headers","set","clone","handle","catchError","err","handleError","find","u","startsWith","OAuthStorage","OAuthResourceServerErrorHandler","ResourceServerAutoLogoutErrorHandler","status","EMPTY","throwError","SessionStorageOAuthStore","prefix","storage","sessionStorage","key","calculateKey","removeItem","setItem","data","parentModule","NgModule","args","imports","CommonModule","OAuthModule","forRoot","declarations","providers","provide","HTTP_INTERCEPTORS","useClass","multi","AuthenticationModule","decorators","Optional","SkipSelf","HttpClientModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthenticatedResultService {\n  private _authenticatedResult$ = new ReplaySubject<boolean>(1);\n\n  get authenticatedResult$(): Observable<boolean> {\n    return this._authenticatedResult$\n      .asObservable()\n      .pipe(distinctUntilChanged());\n  }\n\n  setAuthenticatedResult(value: boolean): void {\n    this._authenticatedResult$.next(value);\n  }\n}\n","import { PlatformLocation } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Config, ConfigService } from '@sofico-framework/app-config';\nimport { WindowRefService } from '@sofico-framework/utils';\nimport { OAuthService } from 'angular-oauth2-oidc';\nimport { JwksValidationHandler } from 'angular-oauth2-oidc-jwks';\nimport { filter, take } from 'rxjs/operators';\nimport { AuthenticatedResultService } from './authenticated-result.service';\n\n@Injectable()\nexport class AuthenticationService {\n  private readonly location: Location = this.windowRefService.nativeWindow\n    .location;\n  private readonly baseHref =\n    this.location.origin + this.platformLocation.getBaseHrefFromDOM();\n\n  constructor(\n    private httpClient: HttpClient,\n    private windowRefService: WindowRefService,\n    private oauthService: OAuthService,\n    private router: Router,\n    private configService: ConfigService,\n    private authenticatedResultService: AuthenticatedResultService,\n    private platformLocation: PlatformLocation\n  ) {\n    if (this.configService.config.auth.grant === 'implicit') {\n      this.configureLoginWithSSO();\n      this.listenOnErrorReceivedAndLogout();\n    } else {\n      throw new Error('unsupported authentication grant');\n    }\n  }\n\n  loginWithSingleSignOn(): void {\n    this.oauthService.initImplicitFlow();\n  }\n\n  logout(pathBasedRedirectUri: boolean = false): void {\n    this.oauthService.redirectUri = this.calculateRedirectUri(\n      pathBasedRedirectUri\n    );\n    this.oauthService.logOut();\n  }\n\n  logoutWithoutRedirect(): void {\n    this.oauthService.logOut(true);\n  }\n\n  setPostLogoutRedirectUri(uri: string): void {\n    this.oauthService.postLogoutRedirectUri = uri;\n  }\n\n  private configureLoginWithSSO(): void {\n    const languageParam = this.getLanguageParam();\n\n    const authConfig = {\n      clientId: this.configService.config.auth.clientId,\n      issuer: this.calculateIssuer(this.configService.config),\n      redirectUri: this.calculateRedirectUri(true),\n      silentRefreshRedirectUri: this.baseHref + 'silent-refresh.html',\n      postLogoutRedirectUri: this.baseHref\n    };\n    this.oauthService.configure(authConfig);\n\n    if (languageParam) {\n      this.oauthService.customQueryParams = {\n        // kc_locale because it set a cookie automatically\n        // that contains the language parameter so it's saved\n        // when you refresh and wait to long before you take an action\n        kc_locale: languageParam\n      };\n    }\n\n    this.oauthService.tokenValidationHandler = new JwksValidationHandler();\n    this.oauthService\n      .loadDiscoveryDocumentAndTryLogin()\n      .then(() =>\n        this.authenticatedResultService.setAuthenticatedResult(\n          this.oauthService.hasValidIdToken()\n        )\n      )\n      .catch(() =>\n        this.authenticatedResultService.setAuthenticatedResult(false)\n      );\n    this.oauthService.setupAutomaticSilentRefresh();\n  }\n\n  private calculateRedirectUri(pathBasedRedirectUri: boolean): string {\n    const { protocol, host, pathname, search } = this.location;\n    return `${protocol}//${host}${\n      pathBasedRedirectUri ? pathname + search : ''\n    }`;\n  }\n\n  private calculateIssuer(config: Config): string {\n    return config.auth.baseUrl + config.auth.realm;\n  }\n\n  private listenOnErrorReceivedAndLogout(): void {\n    this.oauthService.events\n      .pipe(\n        filter(\n          event =>\n            event.type === 'silent_refresh_error' ||\n            event.type === 'token_error'\n        ),\n        take(1)\n      )\n      .subscribe(() => this.logout(true));\n  }\n\n  private getLanguageParam(): string {\n    // the reason why we're using windowRefService instead of activatedRouter\n    // to get the router params is because activatedRouter params has no value.\n    // This is because there is no NavigationEnd event on Router\n    const queryString = this.windowRefService.nativeWindow.location.search;\n    const urlParams = new URLSearchParams(queryString);\n\n    return urlParams.get('ui_locales');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthenticatedResultService } from '../services/authenticated-result.service';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable()\nexport class AuthenticatedGuard implements CanActivate {\n  constructor(\n    private authenticationService: AuthenticationService,\n    private authenticatedResultService: AuthenticatedResultService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authenticatedResultService.authenticatedResult$.pipe(\n      tap((authenticated: boolean) => {\n        if (!authenticated) {\n          this.authenticationService.loginWithSingleSignOn();\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { ConfigService } from '@sofico-framework/app-config';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthenticatedResultService } from '../services/authenticated-result.service';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable()\nexport class GuestGuard implements CanActivate {\n  constructor(\n    private authenticationService: AuthenticationService,\n    private authenticatedResultService: AuthenticatedResultService,\n    private configService: ConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authenticatedResultService.authenticatedResult$.pipe(\n      map((authenticated: boolean) => {\n        if (authenticated) {\n          this.router.navigate(['/']);\n          return false;\n        } else {\n          if (this.configService.config.auth.grant === 'implicit') {\n            this.authenticationService.loginWithSingleSignOn();\n            return false;\n          }\n        }\n        return !authenticated;\n      })\n    );\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ConfigService } from '@sofico-framework/app-config';\nimport {\n  OAuthResourceServerErrorHandler,\n  OAuthStorage\n} from 'angular-oauth2-oidc';\nimport { Observable } from 'rxjs';\nimport { catchError, filter, mergeMap, take } from 'rxjs/operators';\nimport { AuthenticatedResultService } from '../services/authenticated-result.service';\n\n@Injectable()\nexport class CustomOAuthInterceptor implements HttpInterceptor {\n  constructor(\n    private authStorage: OAuthStorage,\n    private errorHandler: OAuthResourceServerErrorHandler,\n    private configService: ConfigService,\n    private authenticatedResultService: AuthenticatedResultService\n  ) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const url = req.url.toLowerCase();\n\n    if (!this.configService.config) {\n      return next.handle(req);\n    }\n\n    if (!this.configService.config.auth) {\n      return next.handle(req);\n    }\n\n    if (!this.configService.config.auth.allowedUrls) {\n      return next.handle(req);\n    }\n\n    if (!this.checkUrl(url, this.configService.config.auth.allowedUrls)) {\n      return next.handle(req);\n    }\n\n    return this.authenticatedResultService.authenticatedResult$.pipe(\n      take(1),\n      filter(v => !!v),\n      mergeMap(() => {\n        const token = this.authStorage.getItem('access_token');\n        const header = 'Bearer ' + token;\n        const headers = req.headers.set('Authorization', header);\n        req = req.clone({ headers });\n        return next.handle(req);\n      }),\n      catchError(err => this.errorHandler.handleError(err)) as any\n    );\n  }\n\n  private checkUrl(url: string, allowedUrls: string[]): boolean {\n    const found = allowedUrls.find(u => url.startsWith(u));\n    return !!found;\n  }\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { WindowRefService } from '@sofico-framework/utils';\nimport {\n  OAuthResourceServerErrorHandler,\n  OAuthService\n} from 'angular-oauth2-oidc';\nimport { EMPTY, Observable, throwError } from 'rxjs';\n\n@Injectable()\nexport class ResourceServerAutoLogoutErrorHandler\n  implements OAuthResourceServerErrorHandler {\n  private readonly location: Location = this.windowRefService.nativeWindow\n    .location;\n\n  constructor(\n    private oauthService: OAuthService,\n    private windowRefService: WindowRefService\n  ) {}\n\n  handleError(err: HttpResponse<any>): Observable<any> {\n    if (err.status === 401) {\n      this.logout(true);\n      return EMPTY;\n    } else {\n      return throwError(err);\n    }\n  }\n\n  private logout(pathBasedRedirectUri: boolean): void {\n    this.oauthService.redirectUri = this.calculateRedirectUri(\n      pathBasedRedirectUri\n    );\n    this.oauthService.logOut();\n  }\n\n  private calculateRedirectUri(pathBasedRedirectUri: boolean): string {\n    const { protocol, host, pathname, search } = this.location;\n    return `${protocol}//${host}${\n      pathBasedRedirectUri ? pathname + search : ''\n    }`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigService } from '@sofico-framework/app-config';\nimport { WindowRefService } from '@sofico-framework/utils';\nimport { OAuthStorage } from 'angular-oauth2-oidc';\n\n@Injectable()\nexport class SessionStorageOAuthStore implements OAuthStorage {\n  private readonly prefix = this.configService.config.auth.clientId;\n  private readonly storage = this.windowRefService.nativeWindow.sessionStorage;\n\n  constructor(\n    private configService: ConfigService,\n    private windowRefService: WindowRefService\n  ) {}\n\n  getItem(key: string): string | null {\n    return this.storage.getItem(this.calculateKey(key));\n  }\n\n  removeItem(key: string): void {\n    this.storage.removeItem(this.calculateKey(key));\n  }\n\n  setItem(key: string, data: string): void {\n    this.storage.setItem(this.calculateKey(key), data);\n  }\n\n  private calculateKey(key: string): string {\n    return `${this.prefix}_${key}`;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ConfigService } from '@sofico-framework/app-config';\nimport { WindowRefService } from '@sofico-framework/utils';\nimport {\n  OAuthModule,\n  OAuthResourceServerErrorHandler,\n  OAuthStorage\n} from 'angular-oauth2-oidc';\nimport { AuthenticatedGuard } from './guards/authenticated.guard';\nimport { GuestGuard } from './guards/guest.guard';\nimport { CustomOAuthInterceptor } from './interceptors/custom-oauth.interceptor';\nimport { ResourceServerAutoLogoutErrorHandler } from './interceptors/resource-server-auto-logout-error-handler';\nimport { AuthenticatedResultService } from './services/authenticated-result.service';\n\nimport { AuthenticationService } from './services/authentication.service';\nimport { SessionStorageOAuthStore } from './stores/session-storage-oauth.store';\n\n@NgModule({\n  imports: [CommonModule, OAuthModule.forRoot()],\n  declarations: [],\n  providers: [\n    AuthenticationService,\n    AuthenticatedResultService,\n    AuthenticatedGuard,\n    GuestGuard,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: CustomOAuthInterceptor,\n      multi: true\n    },\n    {\n      provide: OAuthStorage,\n      useClass: SessionStorageOAuthStore\n    },\n    {\n      provide: OAuthResourceServerErrorHandler,\n      useClass: ResourceServerAutoLogoutErrorHandler\n    }\n  ]\n})\nexport class AuthenticationModule {\n  constructor(\n    @Optional() @SkipSelf() parentModule: AuthenticationModule,\n    @Optional() windowRefService: WindowRefService,\n    @Optional() httpClient: HttpClientModule,\n    @Optional() configService: ConfigService\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'AuthenticationModule is already loaded. Import in your base AppModule only.'\n      );\n    }\n    if (!windowRefService) {\n      throw new Error(\n        'You need to import the UtilServicesModule in your AppModule!'\n      );\n    }\n    if (!httpClient) {\n      throw new Error(\n        'You need to import the HttpClientModule in your AppModule!'\n      );\n    }\n    if (!configService) {\n      throw new Error(\n        'You need to import the AppConfigModule in your AppModule!'\n      );\n    }\n  }\n}\n"]}